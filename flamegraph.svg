<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="806" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="789.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="789.00"> </text><svg id="frames" x="10" width="1180" total_samples="875"><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.80%)</title><rect x="0.0000%" y="725" width="0.8000%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="7"/><text x="0.2500%" y="735.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.23%)</title><rect x="0.5714%" y="709" width="0.2286%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="2"/><text x="0.8214%" y="719.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.11%)</title><rect x="0.6857%" y="693" width="0.1143%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="1"/><text x="0.9357%" y="703.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.11%)</title><rect x="0.6857%" y="677" width="0.1143%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="1"/><text x="0.9357%" y="687.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.11%)</title><rect x="0.6857%" y="661" width="0.1143%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="1"/><text x="0.9357%" y="671.50"></text></g><g><title>__ctype_init (1 samples, 0.11%)</title><rect x="1.0286%" y="693" width="0.1143%" height="15" fill="rgb(232,128,0)" fg:x="9" fg:w="1"/><text x="1.2786%" y="703.50"></text></g><g><title>__mmap (4 samples, 0.46%)</title><rect x="1.1429%" y="613" width="0.4571%" height="15" fill="rgb(207,160,47)" fg:x="10" fg:w="4"/><text x="1.3929%" y="623.50"></text></g><g><title>[libc.so.6] (8 samples, 0.91%)</title><rect x="0.8000%" y="725" width="0.9143%" height="15" fill="rgb(228,23,34)" fg:x="7" fg:w="8"/><text x="1.0500%" y="735.50"></text></g><g><title>[libc.so.6] (7 samples, 0.80%)</title><rect x="0.9143%" y="709" width="0.8000%" height="15" fill="rgb(218,30,26)" fg:x="8" fg:w="7"/><text x="1.1643%" y="719.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (5 samples, 0.57%)</title><rect x="1.1429%" y="693" width="0.5714%" height="15" fill="rgb(220,122,19)" fg:x="10" fg:w="5"/><text x="1.3929%" y="703.50"></text></g><g><title>std::sys::unix::stack_overflow::Handler::new (5 samples, 0.57%)</title><rect x="1.1429%" y="677" width="0.5714%" height="15" fill="rgb(250,228,42)" fg:x="10" fg:w="5"/><text x="1.3929%" y="687.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (5 samples, 0.57%)</title><rect x="1.1429%" y="661" width="0.5714%" height="15" fill="rgb(240,193,28)" fg:x="10" fg:w="5"/><text x="1.3929%" y="671.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (5 samples, 0.57%)</title><rect x="1.1429%" y="645" width="0.5714%" height="15" fill="rgb(216,20,37)" fg:x="10" fg:w="5"/><text x="1.3929%" y="655.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (5 samples, 0.57%)</title><rect x="1.1429%" y="629" width="0.5714%" height="15" fill="rgb(206,188,39)" fg:x="10" fg:w="5"/><text x="1.3929%" y="639.50"></text></g><g><title>__mprotect (1 samples, 0.11%)</title><rect x="1.6000%" y="613" width="0.1143%" height="15" fill="rgb(217,207,13)" fg:x="14" fg:w="1"/><text x="1.8500%" y="623.50"></text></g><g><title>[unknown] (3 samples, 0.34%)</title><rect x="1.7143%" y="725" width="0.3429%" height="15" fill="rgb(231,73,38)" fg:x="15" fg:w="3"/><text x="1.9643%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.34%)</title><rect x="1.7143%" y="709" width="0.3429%" height="15" fill="rgb(225,20,46)" fg:x="15" fg:w="3"/><text x="1.9643%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (2 samples, 0.23%)</title><rect x="1.8286%" y="693" width="0.2286%" height="15" fill="rgb(210,31,41)" fg:x="16" fg:w="2"/><text x="2.0786%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (2 samples, 0.23%)</title><rect x="1.8286%" y="677" width="0.2286%" height="15" fill="rgb(221,200,47)" fg:x="16" fg:w="2"/><text x="2.0786%" y="687.50"></text></g><g><title>core::clone::Clone::clone (2 samples, 0.23%)</title><rect x="1.8286%" y="661" width="0.2286%" height="15" fill="rgb(226,26,5)" fg:x="16" fg:w="2"/><text x="2.0786%" y="671.50"></text></g><g><title>tinyhttp_internal::config::&lt;impl core::clone::Clone for alloc::boxed::Box&lt;dyn tinyhttp_internal::config::Route&gt;&gt;::clone (1 samples, 0.11%)</title><rect x="1.9429%" y="645" width="0.1143%" height="15" fill="rgb(249,33,26)" fg:x="17" fg:w="1"/><text x="2.1929%" y="655.50"></text></g><g><title>&lt;std::net::tcp::Incoming as core::iter::traits::iterator::Iterator&gt;::next (65 samples, 7.43%)</title><rect x="2.1714%" y="437" width="7.4286%" height="15" fill="rgb(235,183,28)" fg:x="19" fg:w="65"/><text x="2.4214%" y="447.50">&lt;std::net:..</text></g><g><title>std::net::tcp::TcpListener::accept (65 samples, 7.43%)</title><rect x="2.1714%" y="421" width="7.4286%" height="15" fill="rgb(221,5,38)" fg:x="19" fg:w="65"/><text x="2.4214%" y="431.50">std::net::..</text></g><g><title>std::sys_common::net::TcpListener::accept (65 samples, 7.43%)</title><rect x="2.1714%" y="405" width="7.4286%" height="15" fill="rgb(247,18,42)" fg:x="19" fg:w="65"/><text x="2.4214%" y="415.50">std::sys_c..</text></g><g><title>std::sys::unix::net::Socket::accept (65 samples, 7.43%)</title><rect x="2.1714%" y="389" width="7.4286%" height="15" fill="rgb(241,131,45)" fg:x="19" fg:w="65"/><text x="2.4214%" y="399.50">std::sys::..</text></g><g><title>std::sys::unix::cvt_r (65 samples, 7.43%)</title><rect x="2.1714%" y="373" width="7.4286%" height="15" fill="rgb(249,31,29)" fg:x="19" fg:w="65"/><text x="2.4214%" y="383.50">std::sys::..</text></g><g><title>std::sys::unix::net::Socket::accept::{{closure}} (65 samples, 7.43%)</title><rect x="2.1714%" y="357" width="7.4286%" height="15" fill="rgb(225,111,53)" fg:x="19" fg:w="65"/><text x="2.4214%" y="367.50">std::sys::..</text></g><g><title>accept4 (65 samples, 7.43%)</title><rect x="2.1714%" y="341" width="7.4286%" height="15" fill="rgb(238,160,17)" fg:x="19" fg:w="65"/><text x="2.4214%" y="351.50">accept4</text></g><g><title>[libc.so.6] (1 samples, 0.11%)</title><rect x="9.4857%" y="325" width="0.1143%" height="15" fill="rgb(214,148,48)" fg:x="83" fg:w="1"/><text x="9.7357%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (4 samples, 0.46%)</title><rect x="9.6000%" y="309" width="0.4571%" height="15" fill="rgb(232,36,49)" fg:x="84" fg:w="4"/><text x="9.8500%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.34%)</title><rect x="9.7143%" y="293" width="0.3429%" height="15" fill="rgb(209,103,24)" fg:x="85" fg:w="3"/><text x="9.9643%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.34%)</title><rect x="9.7143%" y="277" width="0.3429%" height="15" fill="rgb(229,88,8)" fg:x="85" fg:w="3"/><text x="9.9643%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.34%)</title><rect x="9.7143%" y="261" width="0.3429%" height="15" fill="rgb(213,181,19)" fg:x="85" fg:w="3"/><text x="9.9643%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.34%)</title><rect x="9.7143%" y="245" width="0.3429%" height="15" fill="rgb(254,191,54)" fg:x="85" fg:w="3"/><text x="9.9643%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.34%)</title><rect x="9.7143%" y="229" width="0.3429%" height="15" fill="rgb(241,83,37)" fg:x="85" fg:w="3"/><text x="9.9643%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.34%)</title><rect x="9.7143%" y="213" width="0.3429%" height="15" fill="rgb(233,36,39)" fg:x="85" fg:w="3"/><text x="9.9643%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.34%)</title><rect x="9.7143%" y="197" width="0.3429%" height="15" fill="rgb(226,3,54)" fg:x="85" fg:w="3"/><text x="9.9643%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.34%)</title><rect x="9.7143%" y="181" width="0.3429%" height="15" fill="rgb(245,192,40)" fg:x="85" fg:w="3"/><text x="9.9643%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.34%)</title><rect x="9.7143%" y="165" width="0.3429%" height="15" fill="rgb(238,167,29)" fg:x="85" fg:w="3"/><text x="9.9643%" y="175.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.34%)</title><rect x="9.7143%" y="149" width="0.3429%" height="15" fill="rgb(232,182,51)" fg:x="85" fg:w="3"/><text x="9.9643%" y="159.50"></text></g><g><title>malloc (3 samples, 0.34%)</title><rect x="9.7143%" y="133" width="0.3429%" height="15" fill="rgb(231,60,39)" fg:x="85" fg:w="3"/><text x="9.9643%" y="143.50"></text></g><g><title>[libc.so.6] (1 samples, 0.11%)</title><rect x="9.9429%" y="117" width="0.1143%" height="15" fill="rgb(208,69,12)" fg:x="87" fg:w="1"/><text x="10.1929%" y="127.50"></text></g><g><title>&lt;tinyhttp_internal::codegen::route::BasicGetRoute as tinyhttp_internal::config::Route&gt;::clone_dyn (1 samples, 0.11%)</title><rect x="10.0571%" y="293" width="0.1143%" height="15" fill="rgb(235,93,37)" fg:x="88" fg:w="1"/><text x="10.3071%" y="303.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.11%)</title><rect x="10.0571%" y="277" width="0.1143%" height="15" fill="rgb(213,116,39)" fg:x="88" fg:w="1"/><text x="10.3071%" y="287.50"></text></g><g><title>&lt;tinyhttp_internal::codegen::route::GetRouteWithReq as tinyhttp_internal::config::Route&gt;::clone_dyn (1 samples, 0.11%)</title><rect x="10.1714%" y="293" width="0.1143%" height="15" fill="rgb(222,207,29)" fg:x="89" fg:w="1"/><text x="10.4214%" y="303.50"></text></g><g><title>&lt;tinyhttp_internal::codegen::route::GetRouteWithReq as core::clone::Clone&gt;::clone (1 samples, 0.11%)</title><rect x="10.1714%" y="277" width="0.1143%" height="15" fill="rgb(206,96,30)" fg:x="89" fg:w="1"/><text x="10.4214%" y="287.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.11%)</title><rect x="10.1714%" y="261" width="0.1143%" height="15" fill="rgb(218,138,4)" fg:x="89" fg:w="1"/><text x="10.4214%" y="271.50"></text></g><g><title>&lt;tinyhttp_internal::codegen::route::PostRouteWithReq as core::clone::Clone&gt;::clone (1 samples, 0.11%)</title><rect x="10.2857%" y="277" width="0.1143%" height="15" fill="rgb(250,191,14)" fg:x="90" fg:w="1"/><text x="10.5357%" y="287.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.11%)</title><rect x="10.2857%" y="261" width="0.1143%" height="15" fill="rgb(239,60,40)" fg:x="90" fg:w="1"/><text x="10.5357%" y="271.50"></text></g><g><title>core::clone::Clone::clone (8 samples, 0.91%)</title><rect x="9.6000%" y="325" width="0.9143%" height="15" fill="rgb(206,27,48)" fg:x="84" fg:w="8"/><text x="9.8500%" y="335.50"></text></g><g><title>tinyhttp_internal::config::&lt;impl core::clone::Clone for alloc::boxed::Box&lt;dyn tinyhttp_internal::config::Route&gt;&gt;::clone (4 samples, 0.46%)</title><rect x="10.0571%" y="309" width="0.4571%" height="15" fill="rgb(225,35,8)" fg:x="88" fg:w="4"/><text x="10.3071%" y="319.50"></text></g><g><title>&lt;tinyhttp_internal::codegen::route::PostRouteWithReq as tinyhttp_internal::config::Route&gt;::clone_dyn (2 samples, 0.23%)</title><rect x="10.2857%" y="293" width="0.2286%" height="15" fill="rgb(250,213,24)" fg:x="90" fg:w="2"/><text x="10.5357%" y="303.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.11%)</title><rect x="10.4000%" y="277" width="0.1143%" height="15" fill="rgb(247,123,22)" fg:x="91" fg:w="1"/><text x="10.6500%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (9 samples, 1.03%)</title><rect x="9.6000%" y="357" width="1.0286%" height="15" fill="rgb(231,138,38)" fg:x="84" fg:w="9"/><text x="9.8500%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (9 samples, 1.03%)</title><rect x="9.6000%" y="341" width="1.0286%" height="15" fill="rgb(231,145,46)" fg:x="84" fg:w="9"/><text x="9.8500%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (1 samples, 0.11%)</title><rect x="10.5143%" y="325" width="0.1143%" height="15" fill="rgb(251,118,11)" fg:x="92" fg:w="1"/><text x="10.7643%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.11%)</title><rect x="10.5143%" y="309" width="0.1143%" height="15" fill="rgb(217,147,25)" fg:x="92" fg:w="1"/><text x="10.7643%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.11%)</title><rect x="10.5143%" y="293" width="0.1143%" height="15" fill="rgb(247,81,37)" fg:x="92" fg:w="1"/><text x="10.7643%" y="303.50"></text></g><g><title>&lt;tinyhttp_internal::config::Config as core::clone::Clone&gt;::clone (10 samples, 1.14%)</title><rect x="9.6000%" y="437" width="1.1429%" height="15" fill="rgb(209,12,38)" fg:x="84" fg:w="10"/><text x="9.8500%" y="447.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (10 samples, 1.14%)</title><rect x="9.6000%" y="421" width="1.1429%" height="15" fill="rgb(227,1,9)" fg:x="84" fg:w="10"/><text x="9.8500%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (10 samples, 1.14%)</title><rect x="9.6000%" y="405" width="1.1429%" height="15" fill="rgb(248,47,43)" fg:x="84" fg:w="10"/><text x="9.8500%" y="415.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (10 samples, 1.14%)</title><rect x="9.6000%" y="389" width="1.1429%" height="15" fill="rgb(221,10,30)" fg:x="84" fg:w="10"/><text x="9.8500%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (10 samples, 1.14%)</title><rect x="9.6000%" y="373" width="1.1429%" height="15" fill="rgb(210,229,1)" fg:x="84" fg:w="10"/><text x="9.8500%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (1 samples, 0.11%)</title><rect x="10.6286%" y="357" width="0.1143%" height="15" fill="rgb(222,148,37)" fg:x="93" fg:w="1"/><text x="10.8786%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (1 samples, 0.11%)</title><rect x="10.6286%" y="341" width="0.1143%" height="15" fill="rgb(234,67,33)" fg:x="93" fg:w="1"/><text x="10.8786%" y="351.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1 samples, 0.11%)</title><rect x="10.6286%" y="325" width="0.1143%" height="15" fill="rgb(247,98,35)" fg:x="93" fg:w="1"/><text x="10.8786%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.11%)</title><rect x="10.6286%" y="309" width="0.1143%" height="15" fill="rgb(247,138,52)" fg:x="93" fg:w="1"/><text x="10.8786%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.11%)</title><rect x="10.6286%" y="293" width="0.1143%" height="15" fill="rgb(213,79,30)" fg:x="93" fg:w="1"/><text x="10.8786%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.11%)</title><rect x="10.6286%" y="277" width="0.1143%" height="15" fill="rgb(246,177,23)" fg:x="93" fg:w="1"/><text x="10.8786%" y="287.50"></text></g><g><title>malloc (1 samples, 0.11%)</title><rect x="10.6286%" y="261" width="0.1143%" height="15" fill="rgb(230,62,27)" fg:x="93" fg:w="1"/><text x="10.8786%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.11%)</title><rect x="10.6286%" y="245" width="0.1143%" height="15" fill="rgb(216,154,8)" fg:x="93" fg:w="1"/><text x="10.8786%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (10 samples, 1.14%)</title><rect x="10.7429%" y="293" width="1.1429%" height="15" fill="rgb(244,35,45)" fg:x="94" fg:w="10"/><text x="10.9929%" y="303.50"></text></g><g><title>crossbeam_channel::waker::Waker::try_select::{{closure}} (10 samples, 1.14%)</title><rect x="10.7429%" y="277" width="1.1429%" height="15" fill="rgb(251,115,12)" fg:x="94" fg:w="10"/><text x="10.9929%" y="287.50"></text></g><g><title>crossbeam_channel::context::Context::unpark (10 samples, 1.14%)</title><rect x="10.7429%" y="261" width="1.1429%" height="15" fill="rgb(240,54,50)" fg:x="94" fg:w="10"/><text x="10.9929%" y="271.50"></text></g><g><title>std::thread::Thread::unpark (10 samples, 1.14%)</title><rect x="10.7429%" y="245" width="1.1429%" height="15" fill="rgb(233,84,52)" fg:x="94" fg:w="10"/><text x="10.9929%" y="255.50"></text></g><g><title>std::sys_common::thread_parking::futex::Parker::unpark (10 samples, 1.14%)</title><rect x="10.7429%" y="229" width="1.1429%" height="15" fill="rgb(207,117,47)" fg:x="94" fg:w="10"/><text x="10.9929%" y="239.50"></text></g><g><title>std::sys::unix::futex::futex_wake (10 samples, 1.14%)</title><rect x="10.7429%" y="213" width="1.1429%" height="15" fill="rgb(249,43,39)" fg:x="94" fg:w="10"/><text x="10.9929%" y="223.50"></text></g><g><title>syscall (10 samples, 1.14%)</title><rect x="10.7429%" y="197" width="1.1429%" height="15" fill="rgb(209,38,44)" fg:x="94" fg:w="10"/><text x="10.9929%" y="207.50"></text></g><g><title>example (105 samples, 12.00%)</title><rect x="0.0000%" y="741" width="12.0000%" height="15" fill="rgb(236,212,23)" fg:x="0" fg:w="105"/><text x="0.2500%" y="751.50">example</text></g><g><title>_start (87 samples, 9.94%)</title><rect x="2.0571%" y="725" width="9.9429%" height="15" fill="rgb(242,79,21)" fg:x="18" fg:w="87"/><text x="2.3071%" y="735.50">_start</text></g><g><title>__libc_start_main (87 samples, 9.94%)</title><rect x="2.0571%" y="709" width="9.9429%" height="15" fill="rgb(211,96,35)" fg:x="18" fg:w="87"/><text x="2.3071%" y="719.50">__libc_start_m..</text></g><g><title>[libc.so.6] (87 samples, 9.94%)</title><rect x="2.0571%" y="693" width="9.9429%" height="15" fill="rgb(253,215,40)" fg:x="18" fg:w="87"/><text x="2.3071%" y="703.50">[libc.so.6]</text></g><g><title>main (87 samples, 9.94%)</title><rect x="2.0571%" y="677" width="9.9429%" height="15" fill="rgb(211,81,21)" fg:x="18" fg:w="87"/><text x="2.3071%" y="687.50">main</text></g><g><title>std::rt::lang_start_internal (87 samples, 9.94%)</title><rect x="2.0571%" y="661" width="9.9429%" height="15" fill="rgb(208,190,38)" fg:x="18" fg:w="87"/><text x="2.3071%" y="671.50">std::rt::lang_..</text></g><g><title>std::panic::catch_unwind (87 samples, 9.94%)</title><rect x="2.0571%" y="645" width="9.9429%" height="15" fill="rgb(235,213,38)" fg:x="18" fg:w="87"/><text x="2.3071%" y="655.50">std::panic::ca..</text></g><g><title>std::panicking::try (87 samples, 9.94%)</title><rect x="2.0571%" y="629" width="9.9429%" height="15" fill="rgb(237,122,38)" fg:x="18" fg:w="87"/><text x="2.3071%" y="639.50">std::panicking..</text></g><g><title>std::panicking::try::do_call (87 samples, 9.94%)</title><rect x="2.0571%" y="613" width="9.9429%" height="15" fill="rgb(244,218,35)" fg:x="18" fg:w="87"/><text x="2.3071%" y="623.50">std::panicking..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (87 samples, 9.94%)</title><rect x="2.0571%" y="597" width="9.9429%" height="15" fill="rgb(240,68,47)" fg:x="18" fg:w="87"/><text x="2.3071%" y="607.50">std::rt::lang_..</text></g><g><title>std::panic::catch_unwind (87 samples, 9.94%)</title><rect x="2.0571%" y="581" width="9.9429%" height="15" fill="rgb(210,16,53)" fg:x="18" fg:w="87"/><text x="2.3071%" y="591.50">std::panic::ca..</text></g><g><title>std::panicking::try (87 samples, 9.94%)</title><rect x="2.0571%" y="565" width="9.9429%" height="15" fill="rgb(235,124,12)" fg:x="18" fg:w="87"/><text x="2.3071%" y="575.50">std::panicking..</text></g><g><title>std::panicking::try::do_call (87 samples, 9.94%)</title><rect x="2.0571%" y="549" width="9.9429%" height="15" fill="rgb(224,169,11)" fg:x="18" fg:w="87"/><text x="2.3071%" y="559.50">std::panicking..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (87 samples, 9.94%)</title><rect x="2.0571%" y="533" width="9.9429%" height="15" fill="rgb(250,166,2)" fg:x="18" fg:w="87"/><text x="2.3071%" y="543.50">core::ops::fun..</text></g><g><title>std::rt::lang_start::{{closure}} (87 samples, 9.94%)</title><rect x="2.0571%" y="517" width="9.9429%" height="15" fill="rgb(242,216,29)" fg:x="18" fg:w="87"/><text x="2.3071%" y="527.50">std::rt::lang_..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (87 samples, 9.94%)</title><rect x="2.0571%" y="501" width="9.9429%" height="15" fill="rgb(230,116,27)" fg:x="18" fg:w="87"/><text x="2.3071%" y="511.50">std::sys_commo..</text></g><g><title>core::ops::function::FnOnce::call_once (87 samples, 9.94%)</title><rect x="2.0571%" y="485" width="9.9429%" height="15" fill="rgb(228,99,48)" fg:x="18" fg:w="87"/><text x="2.3071%" y="495.50">core::ops::fun..</text></g><g><title>example::main (87 samples, 9.94%)</title><rect x="2.0571%" y="469" width="9.9429%" height="15" fill="rgb(253,11,6)" fg:x="18" fg:w="87"/><text x="2.3071%" y="479.50">example::main</text></g><g><title>tinyhttp_internal::http::start_http (87 samples, 9.94%)</title><rect x="2.0571%" y="453" width="9.9429%" height="15" fill="rgb(247,143,39)" fg:x="18" fg:w="87"/><text x="2.3071%" y="463.50">tinyhttp_inter..</text></g><g><title>rusty_pool::ThreadPool::execute (11 samples, 1.26%)</title><rect x="10.7429%" y="437" width="1.2571%" height="15" fill="rgb(236,97,10)" fg:x="94" fg:w="11"/><text x="10.9929%" y="447.50"></text></g><g><title>rusty_pool::ThreadPool::try_execute (11 samples, 1.26%)</title><rect x="10.7429%" y="421" width="1.2571%" height="15" fill="rgb(233,208,19)" fg:x="94" fg:w="11"/><text x="10.9929%" y="431.50"></text></g><g><title>rusty_pool::ThreadPool::try_execute_task (11 samples, 1.26%)</title><rect x="10.7429%" y="405" width="1.2571%" height="15" fill="rgb(216,164,2)" fg:x="94" fg:w="11"/><text x="10.9929%" y="415.50"></text></g><g><title>rusty_pool::ThreadPool::send_task_to_channel (11 samples, 1.26%)</title><rect x="10.7429%" y="389" width="1.2571%" height="15" fill="rgb(220,129,5)" fg:x="94" fg:w="11"/><text x="10.9929%" y="399.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (11 samples, 1.26%)</title><rect x="10.7429%" y="373" width="1.2571%" height="15" fill="rgb(242,17,10)" fg:x="94" fg:w="11"/><text x="10.9929%" y="383.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (11 samples, 1.26%)</title><rect x="10.7429%" y="357" width="1.2571%" height="15" fill="rgb(242,107,0)" fg:x="94" fg:w="11"/><text x="10.9929%" y="367.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::write (11 samples, 1.26%)</title><rect x="10.7429%" y="341" width="1.2571%" height="15" fill="rgb(251,28,31)" fg:x="94" fg:w="11"/><text x="10.9929%" y="351.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (11 samples, 1.26%)</title><rect x="10.7429%" y="325" width="1.2571%" height="15" fill="rgb(233,223,10)" fg:x="94" fg:w="11"/><text x="10.9929%" y="335.50"></text></g><g><title>crossbeam_channel::waker::Waker::try_select (11 samples, 1.26%)</title><rect x="10.7429%" y="309" width="1.2571%" height="15" fill="rgb(215,21,27)" fg:x="94" fg:w="11"/><text x="10.9929%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.11%)</title><rect x="11.8857%" y="293" width="0.1143%" height="15" fill="rgb(232,23,21)" fg:x="104" fg:w="1"/><text x="12.1357%" y="303.50"></text></g><g><title>crossbeam_channel::waker::Waker::try_select::{{closure}} (1 samples, 0.11%)</title><rect x="11.8857%" y="277" width="0.1143%" height="15" fill="rgb(244,5,23)" fg:x="104" fg:w="1"/><text x="12.1357%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (1 samples, 0.11%)</title><rect x="11.8857%" y="261" width="0.1143%" height="15" fill="rgb(226,81,46)" fg:x="104" fg:w="1"/><text x="12.1357%" y="271.50"></text></g><g><title>core::ptr::read (1 samples, 0.11%)</title><rect x="11.8857%" y="245" width="0.1143%" height="15" fill="rgb(247,70,30)" fg:x="104" fg:w="1"/><text x="12.1357%" y="255.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (1 samples, 0.11%)</title><rect x="12.0000%" y="709" width="0.1143%" height="15" fill="rgb(212,68,19)" fg:x="105" fg:w="1"/><text x="12.2500%" y="719.50"></text></g><g><title>[[heap]] (2 samples, 0.23%)</title><rect x="12.0000%" y="725" width="0.2286%" height="15" fill="rgb(240,187,13)" fg:x="105" fg:w="2"/><text x="12.2500%" y="735.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (1 samples, 0.11%)</title><rect x="12.1143%" y="709" width="0.1143%" height="15" fill="rgb(223,113,26)" fg:x="106" fg:w="1"/><text x="12.3643%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (1 samples, 0.11%)</title><rect x="12.2286%" y="709" width="0.1143%" height="15" fill="rgb(206,192,2)" fg:x="107" fg:w="1"/><text x="12.4786%" y="719.50"></text></g><g><title>core::str::pattern::StrSearcher::new (1 samples, 0.11%)</title><rect x="12.3429%" y="709" width="0.1143%" height="15" fill="rgb(241,108,4)" fg:x="108" fg:w="1"/><text x="12.5929%" y="719.50"></text></g><g><title>tinyhttp_internal::http::build_and_parse_req (2 samples, 0.23%)</title><rect x="12.4571%" y="709" width="0.2286%" height="15" fill="rgb(247,173,49)" fg:x="109" fg:w="2"/><text x="12.7071%" y="719.50"></text></g><g><title>[anon] (5 samples, 0.57%)</title><rect x="12.2286%" y="725" width="0.5714%" height="15" fill="rgb(224,114,35)" fg:x="107" fg:w="5"/><text x="12.4786%" y="735.50"></text></g><g><title>tinyhttp_internal::http::build_res (1 samples, 0.11%)</title><rect x="12.6857%" y="709" width="0.1143%" height="15" fill="rgb(245,159,27)" fg:x="111" fg:w="1"/><text x="12.9357%" y="719.50"></text></g><g><title>[example] (1 samples, 0.11%)</title><rect x="12.8000%" y="725" width="0.1143%" height="15" fill="rgb(245,172,44)" fg:x="112" fg:w="1"/><text x="13.0500%" y="735.50"></text></g><g><title>recv (1 samples, 0.11%)</title><rect x="12.8000%" y="709" width="0.1143%" height="15" fill="rgb(236,23,11)" fg:x="112" fg:w="1"/><text x="13.0500%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.11%)</title><rect x="13.4857%" y="373" width="0.1143%" height="15" fill="rgb(205,117,38)" fg:x="118" fg:w="1"/><text x="13.7357%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.11%)</title><rect x="13.4857%" y="357" width="0.1143%" height="15" fill="rgb(237,72,25)" fg:x="118" fg:w="1"/><text x="13.7357%" y="367.50"></text></g><g><title>__sched_yield (8 samples, 0.91%)</title><rect x="13.6000%" y="357" width="0.9143%" height="15" fill="rgb(244,70,9)" fg:x="119" fg:w="8"/><text x="13.8500%" y="367.50"></text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (10 samples, 1.14%)</title><rect x="13.6000%" y="373" width="1.1429%" height="15" fill="rgb(217,125,39)" fg:x="119" fg:w="10"/><text x="13.8500%" y="383.50"></text></g><g><title>core::sync::atomic::spin_loop_hint (2 samples, 0.23%)</title><rect x="14.5143%" y="357" width="0.2286%" height="15" fill="rgb(235,36,10)" fg:x="127" fg:w="2"/><text x="14.7643%" y="367.50"></text></g><g><title>core::hint::spin_loop (2 samples, 0.23%)</title><rect x="14.5143%" y="341" width="0.2286%" height="15" fill="rgb(251,123,47)" fg:x="127" fg:w="2"/><text x="14.7643%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (2 samples, 0.23%)</title><rect x="14.5143%" y="325" width="0.2286%" height="15" fill="rgb(221,13,13)" fg:x="127" fg:w="2"/><text x="14.7643%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (3 samples, 0.34%)</title><rect x="14.7429%" y="341" width="0.3429%" height="15" fill="rgb(238,131,9)" fg:x="129" fg:w="3"/><text x="14.9929%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (3 samples, 0.34%)</title><rect x="14.7429%" y="325" width="0.3429%" height="15" fill="rgb(211,50,8)" fg:x="129" fg:w="3"/><text x="14.9929%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (1 samples, 0.11%)</title><rect x="15.0857%" y="341" width="0.1143%" height="15" fill="rgb(245,182,24)" fg:x="132" fg:w="1"/><text x="15.3357%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.11%)</title><rect x="15.0857%" y="325" width="0.1143%" height="15" fill="rgb(242,14,37)" fg:x="132" fg:w="1"/><text x="15.3357%" y="335.50"></text></g><g><title>std::sys_common::thread_parking::futex::Parker::park (171 samples, 19.54%)</title><rect x="14.7429%" y="357" width="19.5429%" height="15" fill="rgb(246,228,12)" fg:x="129" fg:w="171"/><text x="14.9929%" y="367.50">std::sys_common::thread_parking..</text></g><g><title>std::sys::unix::futex::futex_wait (167 samples, 19.09%)</title><rect x="15.2000%" y="341" width="19.0857%" height="15" fill="rgb(213,55,15)" fg:x="133" fg:w="167"/><text x="15.4500%" y="351.50">std::sys::unix::futex::futex_w..</text></g><g><title>syscall (167 samples, 19.09%)</title><rect x="15.2000%" y="325" width="19.0857%" height="15" fill="rgb(209,9,3)" fg:x="133" fg:w="167"/><text x="15.4500%" y="335.50">syscall</text></g><g><title>crossbeam_channel::context::Context::with (184 samples, 21.03%)</title><rect x="13.3714%" y="469" width="21.0286%" height="15" fill="rgb(230,59,30)" fg:x="117" fg:w="184"/><text x="13.6214%" y="479.50">crossbeam_channel::context::Conte..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (183 samples, 20.91%)</title><rect x="13.4857%" y="453" width="20.9143%" height="15" fill="rgb(209,121,21)" fg:x="118" fg:w="183"/><text x="13.7357%" y="463.50">std::thread::local::LocalKey&lt;T&gt;::..</text></g><g><title>crossbeam_channel::context::Context::with::{{closure}} (183 samples, 20.91%)</title><rect x="13.4857%" y="437" width="20.9143%" height="15" fill="rgb(220,109,13)" fg:x="118" fg:w="183"/><text x="13.7357%" y="447.50">crossbeam_channel::context::Conte..</text></g><g><title>crossbeam_channel::context::Context::with::{{closure}} (183 samples, 20.91%)</title><rect x="13.4857%" y="421" width="20.9143%" height="15" fill="rgb(232,18,1)" fg:x="118" fg:w="183"/><text x="13.7357%" y="431.50">crossbeam_channel::context::Conte..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv::{{closure}} (183 samples, 20.91%)</title><rect x="13.4857%" y="405" width="20.9143%" height="15" fill="rgb(215,41,42)" fg:x="118" fg:w="183"/><text x="13.7357%" y="415.50">crossbeam_channel::flavors::list:..</text></g><g><title>crossbeam_channel::context::Context::wait_until (183 samples, 20.91%)</title><rect x="13.4857%" y="389" width="20.9143%" height="15" fill="rgb(224,123,36)" fg:x="118" fg:w="183"/><text x="13.7357%" y="399.50">crossbeam_channel::context::Conte..</text></g><g><title>std::thread::park (172 samples, 19.66%)</title><rect x="14.7429%" y="373" width="19.6571%" height="15" fill="rgb(240,125,3)" fg:x="129" fg:w="172"/><text x="14.9929%" y="383.50">std::thread::park</text></g><g><title>std::thread::current (1 samples, 0.11%)</title><rect x="34.2857%" y="357" width="0.1143%" height="15" fill="rgb(205,98,50)" fg:x="300" fg:w="1"/><text x="34.5357%" y="367.50"></text></g><g><title>std::sys_common::thread_info::current_thread (1 samples, 0.11%)</title><rect x="34.2857%" y="341" width="0.1143%" height="15" fill="rgb(205,185,37)" fg:x="300" fg:w="1"/><text x="34.5357%" y="351.50"></text></g><g><title>std::sys_common::thread_info::ThreadInfo::with (1 samples, 0.11%)</title><rect x="34.2857%" y="325" width="0.1143%" height="15" fill="rgb(238,207,15)" fg:x="300" fg:w="1"/><text x="34.5357%" y="335.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.11%)</title><rect x="34.2857%" y="309" width="0.1143%" height="15" fill="rgb(213,199,42)" fg:x="300" fg:w="1"/><text x="34.5357%" y="319.50"></text></g><g><title>std::sys_common::thread_info::ThreadInfo::with::{{closure}} (1 samples, 0.11%)</title><rect x="34.2857%" y="293" width="0.1143%" height="15" fill="rgb(235,201,11)" fg:x="300" fg:w="1"/><text x="34.5357%" y="303.50"></text></g><g><title>std::sys_common::thread_info::current_thread::{{closure}} (1 samples, 0.11%)</title><rect x="34.2857%" y="277" width="0.1143%" height="15" fill="rgb(207,46,11)" fg:x="300" fg:w="1"/><text x="34.5357%" y="287.50"></text></g><g><title>&lt;std::thread::Thread as core::clone::Clone&gt;::clone (1 samples, 0.11%)</title><rect x="34.2857%" y="261" width="0.1143%" height="15" fill="rgb(241,35,35)" fg:x="300" fg:w="1"/><text x="34.5357%" y="271.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::clone::Clone&gt;::clone (1 samples, 0.11%)</title><rect x="34.2857%" y="245" width="0.1143%" height="15" fill="rgb(243,32,47)" fg:x="300" fg:w="1"/><text x="34.5357%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.11%)</title><rect x="34.2857%" y="229" width="0.1143%" height="15" fill="rgb(247,202,23)" fg:x="300" fg:w="1"/><text x="34.5357%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.11%)</title><rect x="34.2857%" y="213" width="0.1143%" height="15" fill="rgb(219,102,11)" fg:x="300" fg:w="1"/><text x="34.5357%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.11%)</title><rect x="34.2857%" y="197" width="0.1143%" height="15" fill="rgb(243,110,44)" fg:x="300" fg:w="1"/><text x="34.5357%" y="207.50"></text></g><g><title>cfree (1 samples, 0.11%)</title><rect x="34.4000%" y="453" width="0.1143%" height="15" fill="rgb(222,74,54)" fg:x="301" fg:w="1"/><text x="34.6500%" y="463.50"></text></g><g><title>[libc.so.6] (1 samples, 0.11%)</title><rect x="34.4000%" y="437" width="0.1143%" height="15" fill="rgb(216,99,12)" fg:x="301" fg:w="1"/><text x="34.6500%" y="447.50"></text></g><g><title>__lll_lock_wait_private (1 samples, 0.11%)</title><rect x="34.4000%" y="421" width="0.1143%" height="15" fill="rgb(226,22,26)" fg:x="301" fg:w="1"/><text x="34.6500%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (1 samples, 0.11%)</title><rect x="34.5143%" y="453" width="0.1143%" height="15" fill="rgb(217,163,10)" fg:x="302" fg:w="1"/><text x="34.7643%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_or (1 samples, 0.11%)</title><rect x="34.5143%" y="437" width="0.1143%" height="15" fill="rgb(213,25,53)" fg:x="302" fg:w="1"/><text x="34.7643%" y="447.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::read (3 samples, 0.34%)</title><rect x="34.4000%" y="469" width="0.3429%" height="15" fill="rgb(252,105,26)" fg:x="301" fg:w="3"/><text x="34.6500%" y="479.50"></text></g><g><title>crossbeam_channel::flavors::list::Slot&lt;T&gt;::wait_write (1 samples, 0.11%)</title><rect x="34.6286%" y="453" width="0.1143%" height="15" fill="rgb(220,39,43)" fg:x="303" fg:w="1"/><text x="34.8786%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.11%)</title><rect x="34.6286%" y="437" width="0.1143%" height="15" fill="rgb(229,68,48)" fg:x="303" fg:w="1"/><text x="34.8786%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.11%)</title><rect x="34.6286%" y="421" width="0.1143%" height="15" fill="rgb(252,8,32)" fg:x="303" fg:w="1"/><text x="34.8786%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.23%)</title><rect x="34.7429%" y="453" width="0.2286%" height="15" fill="rgb(223,20,43)" fg:x="304" fg:w="2"/><text x="34.9929%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.23%)</title><rect x="34.7429%" y="437" width="0.2286%" height="15" fill="rgb(229,81,49)" fg:x="304" fg:w="2"/><text x="34.9929%" y="447.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_recv (4 samples, 0.46%)</title><rect x="34.7429%" y="469" width="0.4571%" height="15" fill="rgb(236,28,36)" fg:x="304" fg:w="4"/><text x="34.9929%" y="479.50"></text></g><g><title>core::sync::atomic::fence (2 samples, 0.23%)</title><rect x="34.9714%" y="453" width="0.2286%" height="15" fill="rgb(249,185,26)" fg:x="306" fg:w="2"/><text x="35.2214%" y="463.50"></text></g><g><title>__sched_yield (17 samples, 1.94%)</title><rect x="35.2000%" y="453" width="1.9429%" height="15" fill="rgb(249,174,33)" fg:x="308" fg:w="17"/><text x="35.4500%" y="463.50">_..</text></g><g><title>core::sync::atomic::spin_loop_hint (2 samples, 0.23%)</title><rect x="37.1429%" y="453" width="0.2286%" height="15" fill="rgb(233,201,37)" fg:x="325" fg:w="2"/><text x="37.3929%" y="463.50"></text></g><g><title>core::hint::spin_loop (2 samples, 0.23%)</title><rect x="37.1429%" y="437" width="0.2286%" height="15" fill="rgb(221,78,26)" fg:x="325" fg:w="2"/><text x="37.3929%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (2 samples, 0.23%)</title><rect x="37.1429%" y="421" width="0.2286%" height="15" fill="rgb(250,127,30)" fg:x="325" fg:w="2"/><text x="37.3929%" y="431.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (214 samples, 24.46%)</title><rect x="13.0286%" y="501" width="24.4571%" height="15" fill="rgb(230,49,44)" fg:x="114" fg:w="214"/><text x="13.2786%" y="511.50">crossbeam_channel::channel::Receiver&lt;T&gt;..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (214 samples, 24.46%)</title><rect x="13.0286%" y="485" width="24.4571%" height="15" fill="rgb(229,67,23)" fg:x="114" fg:w="214"/><text x="13.2786%" y="495.50">crossbeam_channel::flavors::list::Chann..</text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (20 samples, 2.29%)</title><rect x="35.2000%" y="469" width="2.2857%" height="15" fill="rgb(249,83,47)" fg:x="308" fg:w="20"/><text x="35.4500%" y="479.50">c..</text></g><g><title>std::thread::yield_now (1 samples, 0.11%)</title><rect x="37.3714%" y="453" width="0.1143%" height="15" fill="rgb(215,43,3)" fg:x="327" fg:w="1"/><text x="37.6214%" y="463.50"></text></g><g><title>std::sys::unix::thread::Thread::yield_now (1 samples, 0.11%)</title><rect x="37.3714%" y="437" width="0.1143%" height="15" fill="rgb(238,154,13)" fg:x="327" fg:w="1"/><text x="37.6214%" y="447.50"></text></g><g><title>__close (32 samples, 3.66%)</title><rect x="37.4857%" y="469" width="3.6571%" height="15" fill="rgb(219,56,2)" fg:x="328" fg:w="32"/><text x="37.7357%" y="479.50">__cl..</text></g><g><title>&lt;alloc::string::String as core::ops::arith::Add&lt;&amp;str&gt;&gt;::add (1 samples, 0.11%)</title><rect x="41.1429%" y="421" width="0.1143%" height="15" fill="rgb(233,0,4)" fg:x="360" fg:w="1"/><text x="41.3929%" y="431.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.11%)</title><rect x="41.1429%" y="405" width="0.1143%" height="15" fill="rgb(235,30,7)" fg:x="360" fg:w="1"/><text x="41.3929%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.11%)</title><rect x="41.1429%" y="389" width="0.1143%" height="15" fill="rgb(250,79,13)" fg:x="360" fg:w="1"/><text x="41.3929%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.11%)</title><rect x="41.1429%" y="373" width="0.1143%" height="15" fill="rgb(211,146,34)" fg:x="360" fg:w="1"/><text x="41.3929%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.11%)</title><rect x="41.1429%" y="357" width="0.1143%" height="15" fill="rgb(228,22,38)" fg:x="360" fg:w="1"/><text x="41.3929%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.11%)</title><rect x="41.1429%" y="341" width="0.1143%" height="15" fill="rgb(235,168,5)" fg:x="360" fg:w="1"/><text x="41.3929%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.11%)</title><rect x="41.1429%" y="325" width="0.1143%" height="15" fill="rgb(221,155,16)" fg:x="360" fg:w="1"/><text x="41.3929%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="41.1429%" y="309" width="0.1143%" height="15" fill="rgb(215,215,53)" fg:x="360" fg:w="1"/><text x="41.3929%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.11%)</title><rect x="41.1429%" y="293" width="0.1143%" height="15" fill="rgb(223,4,10)" fg:x="360" fg:w="1"/><text x="41.3929%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="41.1429%" y="277" width="0.1143%" height="15" fill="rgb(234,103,6)" fg:x="360" fg:w="1"/><text x="41.3929%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.11%)</title><rect x="41.1429%" y="261" width="0.1143%" height="15" fill="rgb(227,97,0)" fg:x="360" fg:w="1"/><text x="41.3929%" y="271.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.11%)</title><rect x="41.1429%" y="245" width="0.1143%" height="15" fill="rgb(234,150,53)" fg:x="360" fg:w="1"/><text x="41.3929%" y="255.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.11%)</title><rect x="41.1429%" y="229" width="0.1143%" height="15" fill="rgb(228,201,54)" fg:x="360" fg:w="1"/><text x="41.3929%" y="239.50"></text></g><g><title>realloc (1 samples, 0.11%)</title><rect x="41.1429%" y="213" width="0.1143%" height="15" fill="rgb(222,22,37)" fg:x="360" fg:w="1"/><text x="41.3929%" y="223.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (1 samples, 0.11%)</title><rect x="41.2571%" y="421" width="0.1143%" height="15" fill="rgb(237,53,32)" fg:x="361" fg:w="1"/><text x="41.5071%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.11%)</title><rect x="41.2571%" y="405" width="0.1143%" height="15" fill="rgb(233,25,53)" fg:x="361" fg:w="1"/><text x="41.5071%" y="415.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.11%)</title><rect x="41.2571%" y="389" width="0.1143%" height="15" fill="rgb(210,40,34)" fg:x="361" fg:w="1"/><text x="41.5071%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.11%)</title><rect x="41.2571%" y="373" width="0.1143%" height="15" fill="rgb(241,220,44)" fg:x="361" fg:w="1"/><text x="41.5071%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.11%)</title><rect x="41.2571%" y="357" width="0.1143%" height="15" fill="rgb(235,28,35)" fg:x="361" fg:w="1"/><text x="41.5071%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.11%)</title><rect x="41.2571%" y="341" width="0.1143%" height="15" fill="rgb(210,56,17)" fg:x="361" fg:w="1"/><text x="41.5071%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.11%)</title><rect x="41.2571%" y="325" width="0.1143%" height="15" fill="rgb(224,130,29)" fg:x="361" fg:w="1"/><text x="41.5071%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.11%)</title><rect x="41.2571%" y="309" width="0.1143%" height="15" fill="rgb(235,212,8)" fg:x="361" fg:w="1"/><text x="41.5071%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.11%)</title><rect x="41.2571%" y="293" width="0.1143%" height="15" fill="rgb(223,33,50)" fg:x="361" fg:w="1"/><text x="41.5071%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.11%)</title><rect x="41.2571%" y="277" width="0.1143%" height="15" fill="rgb(219,149,13)" fg:x="361" fg:w="1"/><text x="41.5071%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.11%)</title><rect x="41.2571%" y="261" width="0.1143%" height="15" fill="rgb(250,156,29)" fg:x="361" fg:w="1"/><text x="41.5071%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.11%)</title><rect x="41.2571%" y="245" width="0.1143%" height="15" fill="rgb(216,193,19)" fg:x="361" fg:w="1"/><text x="41.5071%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.11%)</title><rect x="41.2571%" y="229" width="0.1143%" height="15" fill="rgb(216,135,14)" fg:x="361" fg:w="1"/><text x="41.5071%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.11%)</title><rect x="41.2571%" y="213" width="0.1143%" height="15" fill="rgb(241,47,5)" fg:x="361" fg:w="1"/><text x="41.5071%" y="223.50"></text></g><g><title>malloc (1 samples, 0.11%)</title><rect x="41.2571%" y="197" width="0.1143%" height="15" fill="rgb(233,42,35)" fg:x="361" fg:w="1"/><text x="41.5071%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.11%)</title><rect x="41.3714%" y="421" width="0.1143%" height="15" fill="rgb(231,13,6)" fg:x="362" fg:w="1"/><text x="41.6214%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.11%)</title><rect x="41.3714%" y="405" width="0.1143%" height="15" fill="rgb(207,181,40)" fg:x="362" fg:w="1"/><text x="41.6214%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.11%)</title><rect x="41.3714%" y="389" width="0.1143%" height="15" fill="rgb(254,173,49)" fg:x="362" fg:w="1"/><text x="41.6214%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.11%)</title><rect x="41.3714%" y="373" width="0.1143%" height="15" fill="rgb(221,1,38)" fg:x="362" fg:w="1"/><text x="41.6214%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.11%)</title><rect x="41.3714%" y="357" width="0.1143%" height="15" fill="rgb(206,124,46)" fg:x="362" fg:w="1"/><text x="41.6214%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.11%)</title><rect x="41.3714%" y="341" width="0.1143%" height="15" fill="rgb(249,21,11)" fg:x="362" fg:w="1"/><text x="41.6214%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.11%)</title><rect x="41.3714%" y="325" width="0.1143%" height="15" fill="rgb(222,201,40)" fg:x="362" fg:w="1"/><text x="41.6214%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.11%)</title><rect x="41.3714%" y="309" width="0.1143%" height="15" fill="rgb(235,61,29)" fg:x="362" fg:w="1"/><text x="41.6214%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.11%)</title><rect x="41.3714%" y="293" width="0.1143%" height="15" fill="rgb(219,207,3)" fg:x="362" fg:w="1"/><text x="41.6214%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.11%)</title><rect x="41.3714%" y="277" width="0.1143%" height="15" fill="rgb(222,56,46)" fg:x="362" fg:w="1"/><text x="41.6214%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.11%)</title><rect x="41.3714%" y="261" width="0.1143%" height="15" fill="rgb(239,76,54)" fg:x="362" fg:w="1"/><text x="41.6214%" y="271.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.11%)</title><rect x="41.4857%" y="245" width="0.1143%" height="15" fill="rgb(231,124,27)" fg:x="363" fg:w="1"/><text x="41.7357%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.11%)</title><rect x="41.4857%" y="229" width="0.1143%" height="15" fill="rgb(249,195,6)" fg:x="363" fg:w="1"/><text x="41.7357%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.11%)</title><rect x="41.4857%" y="213" width="0.1143%" height="15" fill="rgb(237,174,47)" fg:x="363" fg:w="1"/><text x="41.7357%" y="223.50"></text></g><g><title>cfree (1 samples, 0.11%)</title><rect x="41.4857%" y="197" width="0.1143%" height="15" fill="rgb(206,201,31)" fg:x="363" fg:w="1"/><text x="41.7357%" y="207.50"></text></g><g><title>[libc.so.6] (1 samples, 0.11%)</title><rect x="41.4857%" y="181" width="0.1143%" height="15" fill="rgb(231,57,52)" fg:x="363" fg:w="1"/><text x="41.7357%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn tinyhttp_internal::config::Route&gt;&gt; (3 samples, 0.34%)</title><rect x="41.4857%" y="261" width="0.3429%" height="15" fill="rgb(248,177,22)" fg:x="363" fg:w="3"/><text x="41.7357%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;tinyhttp_internal::codegen::route::BasicGetRoute&gt; (2 samples, 0.23%)</title><rect x="41.6000%" y="245" width="0.2286%" height="15" fill="rgb(215,211,37)" fg:x="364" fg:w="2"/><text x="41.8500%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (2 samples, 0.23%)</title><rect x="41.6000%" y="229" width="0.2286%" height="15" fill="rgb(241,128,51)" fg:x="364" fg:w="2"/><text x="41.8500%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.11%)</title><rect x="41.7143%" y="213" width="0.1143%" height="15" fill="rgb(227,165,31)" fg:x="365" fg:w="1"/><text x="41.9643%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.11%)</title><rect x="41.7143%" y="197" width="0.1143%" height="15" fill="rgb(228,167,24)" fg:x="365" fg:w="1"/><text x="41.9643%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.11%)</title><rect x="41.7143%" y="181" width="0.1143%" height="15" fill="rgb(228,143,12)" fg:x="365" fg:w="1"/><text x="41.9643%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="41.7143%" y="165" width="0.1143%" height="15" fill="rgb(249,149,8)" fg:x="365" fg:w="1"/><text x="41.9643%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.46%)</title><rect x="41.4857%" y="341" width="0.4571%" height="15" fill="rgb(243,35,44)" fg:x="363" fg:w="4"/><text x="41.7357%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (4 samples, 0.46%)</title><rect x="41.4857%" y="325" width="0.4571%" height="15" fill="rgb(246,89,9)" fg:x="363" fg:w="4"/><text x="41.7357%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (4 samples, 0.46%)</title><rect x="41.4857%" y="309" width="0.4571%" height="15" fill="rgb(233,213,13)" fg:x="363" fg:w="4"/><text x="41.7357%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (4 samples, 0.46%)</title><rect x="41.4857%" y="293" width="0.4571%" height="15" fill="rgb(233,141,41)" fg:x="363" fg:w="4"/><text x="41.7357%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,alloc::boxed::Box&lt;dyn tinyhttp_internal::config::Route&gt;)&gt; (4 samples, 0.46%)</title><rect x="41.4857%" y="277" width="0.4571%" height="15" fill="rgb(239,167,4)" fg:x="363" fg:w="4"/><text x="41.7357%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.11%)</title><rect x="41.8286%" y="261" width="0.1143%" height="15" fill="rgb(209,217,16)" fg:x="366" fg:w="1"/><text x="42.0786%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.11%)</title><rect x="41.8286%" y="245" width="0.1143%" height="15" fill="rgb(219,88,35)" fg:x="366" fg:w="1"/><text x="42.0786%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.11%)</title><rect x="41.8286%" y="229" width="0.1143%" height="15" fill="rgb(220,193,23)" fg:x="366" fg:w="1"/><text x="42.0786%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="41.8286%" y="213" width="0.1143%" height="15" fill="rgb(230,90,52)" fg:x="366" fg:w="1"/><text x="42.0786%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.11%)</title><rect x="41.8286%" y="197" width="0.1143%" height="15" fill="rgb(252,106,19)" fg:x="366" fg:w="1"/><text x="42.0786%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.11%)</title><rect x="41.8286%" y="181" width="0.1143%" height="15" fill="rgb(206,74,20)" fg:x="366" fg:w="1"/><text x="42.0786%" y="191.50"></text></g><g><title>cfree (1 samples, 0.11%)</title><rect x="41.8286%" y="165" width="0.1143%" height="15" fill="rgb(230,138,44)" fg:x="366" fg:w="1"/><text x="42.0786%" y="175.50"></text></g><g><title>[libc.so.6] (1 samples, 0.11%)</title><rect x="41.8286%" y="149" width="0.1143%" height="15" fill="rgb(235,182,43)" fg:x="366" fg:w="1"/><text x="42.0786%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;tinyhttp_internal::config::Config&gt; (5 samples, 0.57%)</title><rect x="41.4857%" y="421" width="0.5714%" height="15" fill="rgb(242,16,51)" fg:x="363" fg:w="5"/><text x="41.7357%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,alloc::boxed::Box&lt;dyn tinyhttp_internal::config::Route&gt;&gt;&gt;&gt; (5 samples, 0.57%)</title><rect x="41.4857%" y="405" width="0.5714%" height="15" fill="rgb(248,9,4)" fg:x="363" fg:w="5"/><text x="41.7357%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,alloc::boxed::Box&lt;dyn tinyhttp_internal::config::Route&gt;&gt;&gt; (5 samples, 0.57%)</title><rect x="41.4857%" y="389" width="0.5714%" height="15" fill="rgb(210,31,22)" fg:x="363" fg:w="5"/><text x="41.7357%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,alloc::boxed::Box&lt;dyn tinyhttp_internal::config::Route&gt;,std::collections::hash::map::RandomState&gt;&gt; (5 samples, 0.57%)</title><rect x="41.4857%" y="373" width="0.5714%" height="15" fill="rgb(239,54,39)" fg:x="363" fg:w="5"/><text x="41.7357%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,alloc::boxed::Box&lt;dyn tinyhttp_internal::config::Route&gt;)&gt;&gt; (5 samples, 0.57%)</title><rect x="41.4857%" y="357" width="0.5714%" height="15" fill="rgb(230,99,41)" fg:x="363" fg:w="5"/><text x="41.7357%" y="367.50"></text></g><g><title>cfree (1 samples, 0.11%)</title><rect x="41.9429%" y="341" width="0.1143%" height="15" fill="rgb(253,106,12)" fg:x="367" fg:w="1"/><text x="42.1929%" y="351.50"></text></g><g><title>[libc.so.6] (1 samples, 0.11%)</title><rect x="41.9429%" y="325" width="0.1143%" height="15" fill="rgb(213,46,41)" fg:x="367" fg:w="1"/><text x="42.1929%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="42.0571%" y="389" width="0.1143%" height="15" fill="rgb(215,133,35)" fg:x="368" fg:w="1"/><text x="42.3071%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;tinyhttp_internal::request::Request&gt; (2 samples, 0.23%)</title><rect x="42.0571%" y="421" width="0.2286%" height="15" fill="rgb(213,28,5)" fg:x="368" fg:w="2"/><text x="42.3071%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (2 samples, 0.23%)</title><rect x="42.0571%" y="405" width="0.2286%" height="15" fill="rgb(215,77,49)" fg:x="368" fg:w="2"/><text x="42.3071%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::string::String&gt;&gt; (1 samples, 0.11%)</title><rect x="42.1714%" y="389" width="0.1143%" height="15" fill="rgb(248,100,22)" fg:x="369" fg:w="1"/><text x="42.4214%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="42.1714%" y="373" width="0.1143%" height="15" fill="rgb(208,67,9)" fg:x="369" fg:w="1"/><text x="42.4214%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.11%)</title><rect x="42.1714%" y="357" width="0.1143%" height="15" fill="rgb(219,133,21)" fg:x="369" fg:w="1"/><text x="42.4214%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.11%)</title><rect x="42.1714%" y="341" width="0.1143%" height="15" fill="rgb(246,46,29)" fg:x="369" fg:w="1"/><text x="42.4214%" y="351.50"></text></g><g><title>cfree (1 samples, 0.11%)</title><rect x="42.1714%" y="325" width="0.1143%" height="15" fill="rgb(246,185,52)" fg:x="369" fg:w="1"/><text x="42.4214%" y="335.50"></text></g><g><title>[libc.so.6] (1 samples, 0.11%)</title><rect x="42.1714%" y="309" width="0.1143%" height="15" fill="rgb(252,136,11)" fg:x="369" fg:w="1"/><text x="42.4214%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;miniz_oxide::deflate::core::HuffmanOxide&gt;&gt; (1 samples, 0.11%)</title><rect x="42.2857%" y="309" width="0.1143%" height="15" fill="rgb(219,138,53)" fg:x="370" fg:w="1"/><text x="42.5357%" y="319.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.11%)</title><rect x="42.2857%" y="293" width="0.1143%" height="15" fill="rgb(211,51,23)" fg:x="370" fg:w="1"/><text x="42.5357%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.11%)</title><rect x="42.2857%" y="277" width="0.1143%" height="15" fill="rgb(247,221,28)" fg:x="370" fg:w="1"/><text x="42.5357%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.11%)</title><rect x="42.2857%" y="261" width="0.1143%" height="15" fill="rgb(251,222,45)" fg:x="370" fg:w="1"/><text x="42.5357%" y="271.50"></text></g><g><title>cfree (1 samples, 0.11%)</title><rect x="42.2857%" y="245" width="0.1143%" height="15" fill="rgb(217,162,53)" fg:x="370" fg:w="1"/><text x="42.5357%" y="255.50"></text></g><g><title>[libc.so.6] (1 samples, 0.11%)</title><rect x="42.2857%" y="229" width="0.1143%" height="15" fill="rgb(229,93,14)" fg:x="370" fg:w="1"/><text x="42.5357%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;flate2::gz::write::GzEncoder&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (4 samples, 0.46%)</title><rect x="42.2857%" y="405" width="0.4571%" height="15" fill="rgb(209,67,49)" fg:x="370" fg:w="4"/><text x="42.5357%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;flate2::zio::Writer&lt;alloc::vec::Vec&lt;u8&gt;,flate2::mem::Compress&gt;&gt; (4 samples, 0.46%)</title><rect x="42.2857%" y="389" width="0.4571%" height="15" fill="rgb(213,87,29)" fg:x="370" fg:w="4"/><text x="42.5357%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;flate2::mem::Compress&gt; (4 samples, 0.46%)</title><rect x="42.2857%" y="373" width="0.4571%" height="15" fill="rgb(205,151,52)" fg:x="370" fg:w="4"/><text x="42.5357%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;flate2::ffi::rust::Deflate&gt; (4 samples, 0.46%)</title><rect x="42.2857%" y="357" width="0.4571%" height="15" fill="rgb(253,215,39)" fg:x="370" fg:w="4"/><text x="42.5357%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;miniz_oxide::deflate::core::CompressorOxide&gt;&gt; (4 samples, 0.46%)</title><rect x="42.2857%" y="341" width="0.4571%" height="15" fill="rgb(221,220,41)" fg:x="370" fg:w="4"/><text x="42.5357%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;miniz_oxide::deflate::core::CompressorOxide&gt; (4 samples, 0.46%)</title><rect x="42.2857%" y="325" width="0.4571%" height="15" fill="rgb(218,133,21)" fg:x="370" fg:w="4"/><text x="42.5357%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;miniz_oxide::deflate::core::ParamsOxide&gt; (3 samples, 0.34%)</title><rect x="42.4000%" y="309" width="0.3429%" height="15" fill="rgb(221,193,43)" fg:x="371" fg:w="3"/><text x="42.6500%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;miniz_oxide::deflate::buffer::LocalBuf&gt;&gt; (3 samples, 0.34%)</title><rect x="42.4000%" y="293" width="0.3429%" height="15" fill="rgb(240,128,52)" fg:x="371" fg:w="3"/><text x="42.6500%" y="303.50"></text></g><g><title>alloc::alloc::box_free (3 samples, 0.34%)</title><rect x="42.4000%" y="277" width="0.3429%" height="15" fill="rgb(253,114,12)" fg:x="371" fg:w="3"/><text x="42.6500%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.34%)</title><rect x="42.4000%" y="261" width="0.3429%" height="15" fill="rgb(215,223,47)" fg:x="371" fg:w="3"/><text x="42.6500%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.34%)</title><rect x="42.4000%" y="245" width="0.3429%" height="15" fill="rgb(248,225,23)" fg:x="371" fg:w="3"/><text x="42.6500%" y="255.50"></text></g><g><title>cfree (3 samples, 0.34%)</title><rect x="42.4000%" y="229" width="0.3429%" height="15" fill="rgb(250,108,0)" fg:x="371" fg:w="3"/><text x="42.6500%" y="239.50"></text></g><g><title>[libc.so.6] (3 samples, 0.34%)</title><rect x="42.4000%" y="213" width="0.3429%" height="15" fill="rgb(228,208,7)" fg:x="371" fg:w="3"/><text x="42.6500%" y="223.50"></text></g><g><title>[libc.so.6] (1 samples, 0.11%)</title><rect x="42.6286%" y="197" width="0.1143%" height="15" fill="rgb(244,45,10)" fg:x="373" fg:w="1"/><text x="42.8786%" y="207.50"></text></g><g><title>miniz_oxide::deflate::core::compress_normal (2 samples, 0.23%)</title><rect x="42.7429%" y="261" width="0.2286%" height="15" fill="rgb(207,125,25)" fg:x="374" fg:w="2"/><text x="42.9929%" y="271.50"></text></g><g><title>miniz_oxide::deflate::core::DictOxide::find_match (1 samples, 0.11%)</title><rect x="42.8571%" y="245" width="0.1143%" height="15" fill="rgb(210,195,18)" fg:x="375" fg:w="1"/><text x="43.1071%" y="255.50"></text></g><g><title>miniz_oxide::deflate::core::LZOxide::init_flag (1 samples, 0.11%)</title><rect x="43.0857%" y="245" width="0.1143%" height="15" fill="rgb(249,80,12)" fg:x="377" fg:w="1"/><text x="43.3357%" y="255.50"></text></g><g><title>miniz_oxide::deflate::core::LZOxide::get_flag (1 samples, 0.11%)</title><rect x="43.0857%" y="229" width="0.1143%" height="15" fill="rgb(221,65,9)" fg:x="377" fg:w="1"/><text x="43.3357%" y="239.50"></text></g><g><title>miniz_oxide::deflate::core::HuffmanOxide::start_static_block (14 samples, 1.60%)</title><rect x="43.2000%" y="229" width="1.6000%" height="15" fill="rgb(235,49,36)" fg:x="378" fg:w="14"/><text x="43.4500%" y="239.50"></text></g><g><title>miniz_oxide::deflate::core::HuffmanOxide::optimize_table (14 samples, 1.60%)</title><rect x="43.2000%" y="213" width="1.6000%" height="15" fill="rgb(225,32,20)" fg:x="378" fg:w="14"/><text x="43.4500%" y="223.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.23%)</title><rect x="44.5714%" y="197" width="0.2286%" height="15" fill="rgb(215,141,46)" fg:x="390" fg:w="2"/><text x="44.8214%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.23%)</title><rect x="44.5714%" y="181" width="0.2286%" height="15" fill="rgb(250,160,47)" fg:x="390" fg:w="2"/><text x="44.8214%" y="191.50"></text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run_vec (19 samples, 2.17%)</title><rect x="42.7429%" y="373" width="2.1714%" height="15" fill="rgb(216,222,40)" fg:x="374" fg:w="19"/><text x="42.9929%" y="383.50">&lt;..</text></g><g><title>flate2::mem::Compress::compress_vec (19 samples, 2.17%)</title><rect x="42.7429%" y="357" width="2.1714%" height="15" fill="rgb(234,217,39)" fg:x="374" fg:w="19"/><text x="42.9929%" y="367.50">f..</text></g><g><title>flate2::mem::Compress::compress (19 samples, 2.17%)</title><rect x="42.7429%" y="341" width="2.1714%" height="15" fill="rgb(207,178,40)" fg:x="374" fg:w="19"/><text x="42.9929%" y="351.50">f..</text></g><g><title>&lt;flate2::ffi::rust::Deflate as flate2::ffi::DeflateBackend&gt;::compress (19 samples, 2.17%)</title><rect x="42.7429%" y="325" width="2.1714%" height="15" fill="rgb(221,136,13)" fg:x="374" fg:w="19"/><text x="42.9929%" y="335.50">&lt;..</text></g><g><title>miniz_oxide::deflate::stream::deflate (19 samples, 2.17%)</title><rect x="42.7429%" y="309" width="2.1714%" height="15" fill="rgb(249,199,10)" fg:x="374" fg:w="19"/><text x="42.9929%" y="319.50">m..</text></g><g><title>miniz_oxide::deflate::core::compress (19 samples, 2.17%)</title><rect x="42.7429%" y="293" width="2.1714%" height="15" fill="rgb(249,222,13)" fg:x="374" fg:w="19"/><text x="42.9929%" y="303.50">m..</text></g><g><title>miniz_oxide::deflate::core::compress_inner (19 samples, 2.17%)</title><rect x="42.7429%" y="277" width="2.1714%" height="15" fill="rgb(244,185,38)" fg:x="374" fg:w="19"/><text x="42.9929%" y="287.50">m..</text></g><g><title>miniz_oxide::deflate::core::flush_block (17 samples, 1.94%)</title><rect x="42.9714%" y="261" width="1.9429%" height="15" fill="rgb(236,202,9)" fg:x="376" fg:w="17"/><text x="43.2214%" y="271.50">m..</text></g><g><title>miniz_oxide::deflate::core::compress_block (15 samples, 1.71%)</title><rect x="43.2000%" y="245" width="1.7143%" height="15" fill="rgb(250,229,37)" fg:x="378" fg:w="15"/><text x="43.4500%" y="255.50"></text></g><g><title>miniz_oxide::deflate::core::compress_lz_codes (1 samples, 0.11%)</title><rect x="44.8000%" y="229" width="0.1143%" height="15" fill="rgb(206,174,23)" fg:x="392" fg:w="1"/><text x="45.0500%" y="239.50"></text></g><g><title>miniz_oxide::deflate::core::BitBuffer::flush (1 samples, 0.11%)</title><rect x="44.8000%" y="213" width="0.1143%" height="15" fill="rgb(211,33,43)" fg:x="392" fg:w="1"/><text x="45.0500%" y="223.50"></text></g><g><title>flate2::gz::write::GzEncoder&lt;W&gt;::finish (24 samples, 2.74%)</title><rect x="42.2857%" y="421" width="2.7429%" height="15" fill="rgb(245,58,50)" fg:x="370" fg:w="24"/><text x="42.5357%" y="431.50">fl..</text></g><g><title>flate2::gz::write::GzEncoder&lt;W&gt;::try_finish (20 samples, 2.29%)</title><rect x="42.7429%" y="405" width="2.2857%" height="15" fill="rgb(244,68,36)" fg:x="374" fg:w="20"/><text x="42.9929%" y="415.50">f..</text></g><g><title>flate2::zio::Writer&lt;W,D&gt;::finish (20 samples, 2.29%)</title><rect x="42.7429%" y="389" width="2.2857%" height="15" fill="rgb(232,229,15)" fg:x="374" fg:w="20"/><text x="42.9929%" y="399.50">f..</text></g><g><title>flate2::zio::Writer&lt;W,D&gt;::dump (1 samples, 0.11%)</title><rect x="44.9143%" y="373" width="0.1143%" height="15" fill="rgb(254,30,23)" fg:x="393" fg:w="1"/><text x="45.1643%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (1 samples, 0.11%)</title><rect x="44.9143%" y="357" width="0.1143%" height="15" fill="rgb(235,160,14)" fg:x="393" fg:w="1"/><text x="45.1643%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.11%)</title><rect x="44.9143%" y="341" width="0.1143%" height="15" fill="rgb(212,155,44)" fg:x="393" fg:w="1"/><text x="45.1643%" y="351.50"></text></g><g><title>flate2::gz::write::GzEncoder&lt;W&gt;::new (6 samples, 0.69%)</title><rect x="45.0286%" y="421" width="0.6857%" height="15" fill="rgb(226,2,50)" fg:x="394" fg:w="6"/><text x="45.2786%" y="431.50"></text></g><g><title>flate2::gz::GzBuilder::write (6 samples, 0.69%)</title><rect x="45.0286%" y="405" width="0.6857%" height="15" fill="rgb(234,177,6)" fg:x="394" fg:w="6"/><text x="45.2786%" y="415.50"></text></g><g><title>flate2::gz::write::gz_encoder (6 samples, 0.69%)</title><rect x="45.0286%" y="389" width="0.6857%" height="15" fill="rgb(217,24,9)" fg:x="394" fg:w="6"/><text x="45.2786%" y="399.50"></text></g><g><title>flate2::zio::Writer&lt;W,D&gt;::new (6 samples, 0.69%)</title><rect x="45.0286%" y="373" width="0.6857%" height="15" fill="rgb(220,13,46)" fg:x="394" fg:w="6"/><text x="45.2786%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (6 samples, 0.69%)</title><rect x="45.0286%" y="357" width="0.6857%" height="15" fill="rgb(239,221,27)" fg:x="394" fg:w="6"/><text x="45.2786%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.69%)</title><rect x="45.0286%" y="341" width="0.6857%" height="15" fill="rgb(222,198,25)" fg:x="394" fg:w="6"/><text x="45.2786%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.69%)</title><rect x="45.0286%" y="325" width="0.6857%" height="15" fill="rgb(211,99,13)" fg:x="394" fg:w="6"/><text x="45.2786%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.69%)</title><rect x="45.0286%" y="309" width="0.6857%" height="15" fill="rgb(232,111,31)" fg:x="394" fg:w="6"/><text x="45.2786%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.69%)</title><rect x="45.0286%" y="293" width="0.6857%" height="15" fill="rgb(245,82,37)" fg:x="394" fg:w="6"/><text x="45.2786%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.69%)</title><rect x="45.0286%" y="277" width="0.6857%" height="15" fill="rgb(227,149,46)" fg:x="394" fg:w="6"/><text x="45.2786%" y="287.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.69%)</title><rect x="45.0286%" y="261" width="0.6857%" height="15" fill="rgb(218,36,50)" fg:x="394" fg:w="6"/><text x="45.2786%" y="271.50"></text></g><g><title>malloc (6 samples, 0.69%)</title><rect x="45.0286%" y="245" width="0.6857%" height="15" fill="rgb(226,80,48)" fg:x="394" fg:w="6"/><text x="45.2786%" y="255.50"></text></g><g><title>[libc.so.6] (6 samples, 0.69%)</title><rect x="45.0286%" y="229" width="0.6857%" height="15" fill="rgb(238,224,15)" fg:x="394" fg:w="6"/><text x="45.2786%" y="239.50"></text></g><g><title>[libc.so.6] (5 samples, 0.57%)</title><rect x="45.1429%" y="213" width="0.5714%" height="15" fill="rgb(241,136,10)" fg:x="395" fg:w="5"/><text x="45.3929%" y="223.50"></text></g><g><title>infer::matchers::archive::is_msi (1 samples, 0.11%)</title><rect x="45.8286%" y="293" width="0.1143%" height="15" fill="rgb(208,32,45)" fg:x="401" fg:w="1"/><text x="46.0786%" y="303.50"></text></g><g><title>infer::matchers::audio::is_dsf (1 samples, 0.11%)</title><rect x="45.9429%" y="293" width="0.1143%" height="15" fill="rgb(207,135,9)" fg:x="402" fg:w="1"/><text x="46.1929%" y="303.50"></text></g><g><title>infer::matchers::audio::is_mp3 (1 samples, 0.11%)</title><rect x="46.0571%" y="293" width="0.1143%" height="15" fill="rgb(206,86,44)" fg:x="403" fg:w="1"/><text x="46.3071%" y="303.50"></text></g><g><title>infer::matchers::font::is_otf (1 samples, 0.11%)</title><rect x="46.1714%" y="293" width="0.1143%" height="15" fill="rgb(245,177,15)" fg:x="404" fg:w="1"/><text x="46.4214%" y="303.50"></text></g><g><title>infer::matchers::text::trim_start_byte_order_marks (1 samples, 0.11%)</title><rect x="46.2857%" y="277" width="0.1143%" height="15" fill="rgb(206,64,50)" fg:x="405" fg:w="1"/><text x="46.5357%" y="287.50"></text></g><g><title>infer::matchers::text::is_xml (2 samples, 0.23%)</title><rect x="46.2857%" y="293" width="0.2286%" height="15" fill="rgb(234,36,40)" fg:x="405" fg:w="2"/><text x="46.5357%" y="303.50"></text></g><g><title>infer::matchers::text::trim_start_whitespaces (1 samples, 0.11%)</title><rect x="46.4000%" y="277" width="0.1143%" height="15" fill="rgb(213,64,8)" fg:x="406" fg:w="1"/><text x="46.6500%" y="287.50"></text></g><g><title>infer::get (8 samples, 0.91%)</title><rect x="45.7143%" y="421" width="0.9143%" height="15" fill="rgb(210,75,36)" fg:x="400" fg:w="8"/><text x="45.9643%" y="431.50"></text></g><g><title>infer::Infer::get (8 samples, 0.91%)</title><rect x="45.7143%" y="405" width="0.9143%" height="15" fill="rgb(229,88,21)" fg:x="400" fg:w="8"/><text x="45.9643%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::find (8 samples, 0.91%)</title><rect x="45.7143%" y="389" width="0.9143%" height="15" fill="rgb(252,204,47)" fg:x="400" fg:w="8"/><text x="45.9643%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (8 samples, 0.91%)</title><rect x="45.7143%" y="373" width="0.9143%" height="15" fill="rgb(208,77,27)" fg:x="400" fg:w="8"/><text x="45.9643%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::find::{{closure}} (8 samples, 0.91%)</title><rect x="45.7143%" y="357" width="0.9143%" height="15" fill="rgb(221,76,26)" fg:x="400" fg:w="8"/><text x="45.9643%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (8 samples, 0.91%)</title><rect x="45.7143%" y="341" width="0.9143%" height="15" fill="rgb(225,139,18)" fg:x="400" fg:w="8"/><text x="45.9643%" y="351.50"></text></g><g><title>infer::Infer::get::{{closure}} (7 samples, 0.80%)</title><rect x="45.8286%" y="325" width="0.8000%" height="15" fill="rgb(230,137,11)" fg:x="401" fg:w="7"/><text x="46.0786%" y="335.50"></text></g><g><title>infer::Type::matches (7 samples, 0.80%)</title><rect x="45.8286%" y="309" width="0.8000%" height="15" fill="rgb(212,28,1)" fg:x="401" fg:w="7"/><text x="46.0786%" y="319.50"></text></g><g><title>infer::matchers::video::is_mov (1 samples, 0.11%)</title><rect x="46.5143%" y="293" width="0.1143%" height="15" fill="rgb(248,164,17)" fg:x="407" fg:w="1"/><text x="46.7643%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.11%)</title><rect x="46.6286%" y="341" width="0.1143%" height="15" fill="rgb(222,171,42)" fg:x="408" fg:w="1"/><text x="46.8786%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.11%)</title><rect x="46.6286%" y="325" width="0.1143%" height="15" fill="rgb(243,84,45)" fg:x="408" fg:w="1"/><text x="46.8786%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.11%)</title><rect x="46.6286%" y="309" width="0.1143%" height="15" fill="rgb(252,49,23)" fg:x="408" fg:w="1"/><text x="46.8786%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.11%)</title><rect x="46.6286%" y="293" width="0.1143%" height="15" fill="rgb(215,19,7)" fg:x="408" fg:w="1"/><text x="46.8786%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.11%)</title><rect x="46.6286%" y="277" width="0.1143%" height="15" fill="rgb(238,81,41)" fg:x="408" fg:w="1"/><text x="46.8786%" y="287.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (2 samples, 0.23%)</title><rect x="46.6286%" y="421" width="0.2286%" height="15" fill="rgb(210,199,37)" fg:x="408" fg:w="2"/><text x="46.8786%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (2 samples, 0.23%)</title><rect x="46.6286%" y="405" width="0.2286%" height="15" fill="rgb(244,192,49)" fg:x="408" fg:w="2"/><text x="46.8786%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.23%)</title><rect x="46.6286%" y="389" width="0.2286%" height="15" fill="rgb(226,211,11)" fg:x="408" fg:w="2"/><text x="46.8786%" y="399.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.23%)</title><rect x="46.6286%" y="373" width="0.2286%" height="15" fill="rgb(236,162,54)" fg:x="408" fg:w="2"/><text x="46.8786%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.23%)</title><rect x="46.6286%" y="357" width="0.2286%" height="15" fill="rgb(220,229,9)" fg:x="408" fg:w="2"/><text x="46.8786%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.11%)</title><rect x="46.7429%" y="341" width="0.1143%" height="15" fill="rgb(250,87,22)" fg:x="409" fg:w="1"/><text x="46.9929%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.11%)</title><rect x="46.7429%" y="325" width="0.1143%" height="15" fill="rgb(239,43,17)" fg:x="409" fg:w="1"/><text x="46.9929%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (1 samples, 0.11%)</title><rect x="46.7429%" y="309" width="0.1143%" height="15" fill="rgb(231,177,25)" fg:x="409" fg:w="1"/><text x="46.9929%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1 samples, 0.11%)</title><rect x="46.7429%" y="293" width="0.1143%" height="15" fill="rgb(219,179,1)" fg:x="409" fg:w="1"/><text x="46.9929%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1 samples, 0.11%)</title><rect x="46.7429%" y="277" width="0.1143%" height="15" fill="rgb(238,219,53)" fg:x="409" fg:w="1"/><text x="46.9929%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.11%)</title><rect x="46.7429%" y="261" width="0.1143%" height="15" fill="rgb(232,167,36)" fg:x="409" fg:w="1"/><text x="46.9929%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.11%)</title><rect x="46.7429%" y="245" width="0.1143%" height="15" fill="rgb(244,19,51)" fg:x="409" fg:w="1"/><text x="46.9929%" y="255.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.11%)</title><rect x="46.8571%" y="421" width="0.1143%" height="15" fill="rgb(224,6,22)" fg:x="410" fg:w="1"/><text x="47.1071%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.11%)</title><rect x="46.8571%" y="405" width="0.1143%" height="15" fill="rgb(224,145,5)" fg:x="410" fg:w="1"/><text x="47.1071%" y="415.50"></text></g><g><title>hashbrown::map::make_insert_hash (1 samples, 0.11%)</title><rect x="46.8571%" y="389" width="0.1143%" height="15" fill="rgb(234,130,49)" fg:x="410" fg:w="1"/><text x="47.1071%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.11%)</title><rect x="46.8571%" y="373" width="0.1143%" height="15" fill="rgb(254,6,2)" fg:x="410" fg:w="1"/><text x="47.1071%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.11%)</title><rect x="46.8571%" y="357" width="0.1143%" height="15" fill="rgb(208,96,46)" fg:x="410" fg:w="1"/><text x="47.1071%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (1 samples, 0.11%)</title><rect x="46.8571%" y="341" width="0.1143%" height="15" fill="rgb(239,3,39)" fg:x="410" fg:w="1"/><text x="47.1071%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.11%)</title><rect x="46.8571%" y="325" width="0.1143%" height="15" fill="rgb(233,210,1)" fg:x="410" fg:w="1"/><text x="47.1071%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (1 samples, 0.11%)</title><rect x="46.8571%" y="309" width="0.1143%" height="15" fill="rgb(244,137,37)" fg:x="410" fg:w="1"/><text x="47.1071%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1 samples, 0.11%)</title><rect x="46.8571%" y="293" width="0.1143%" height="15" fill="rgb(240,136,2)" fg:x="410" fg:w="1"/><text x="47.1071%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1 samples, 0.11%)</title><rect x="46.8571%" y="277" width="0.1143%" height="15" fill="rgb(239,18,37)" fg:x="410" fg:w="1"/><text x="47.1071%" y="287.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.11%)</title><rect x="46.8571%" y="261" width="0.1143%" height="15" fill="rgb(218,185,22)" fg:x="410" fg:w="1"/><text x="47.1071%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.11%)</title><rect x="46.8571%" y="245" width="0.1143%" height="15" fill="rgb(225,218,4)" fg:x="410" fg:w="1"/><text x="47.1071%" y="255.50"></text></g><g><title>&lt;flate2::zio::Writer&lt;W,D&gt; as std::io::Write&gt;::write (1 samples, 0.11%)</title><rect x="46.9714%" y="389" width="0.1143%" height="15" fill="rgb(230,182,32)" fg:x="411" fg:w="1"/><text x="47.2214%" y="399.50"></text></g><g><title>flate2::zio::Writer&lt;W,D&gt;::write_with_status (1 samples, 0.11%)</title><rect x="46.9714%" y="373" width="0.1143%" height="15" fill="rgb(242,56,43)" fg:x="411" fg:w="1"/><text x="47.2214%" y="383.50"></text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run_vec (1 samples, 0.11%)</title><rect x="46.9714%" y="357" width="0.1143%" height="15" fill="rgb(233,99,24)" fg:x="411" fg:w="1"/><text x="47.2214%" y="367.50"></text></g><g><title>flate2::mem::Compress::compress_vec (1 samples, 0.11%)</title><rect x="46.9714%" y="341" width="0.1143%" height="15" fill="rgb(234,209,42)" fg:x="411" fg:w="1"/><text x="47.2214%" y="351.50"></text></g><g><title>flate2::mem::Compress::compress (1 samples, 0.11%)</title><rect x="46.9714%" y="325" width="0.1143%" height="15" fill="rgb(227,7,12)" fg:x="411" fg:w="1"/><text x="47.2214%" y="335.50"></text></g><g><title>&lt;flate2::ffi::rust::Deflate as flate2::ffi::DeflateBackend&gt;::compress (1 samples, 0.11%)</title><rect x="46.9714%" y="309" width="0.1143%" height="15" fill="rgb(245,203,43)" fg:x="411" fg:w="1"/><text x="47.2214%" y="319.50"></text></g><g><title>miniz_oxide::MZFlush::new (1 samples, 0.11%)</title><rect x="46.9714%" y="293" width="0.1143%" height="15" fill="rgb(238,205,33)" fg:x="411" fg:w="1"/><text x="47.2214%" y="303.50"></text></g><g><title>crc32fast::Hasher::update (1 samples, 0.11%)</title><rect x="47.0857%" y="389" width="0.1143%" height="15" fill="rgb(231,56,7)" fg:x="412" fg:w="1"/><text x="47.3357%" y="399.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::State::update (1 samples, 0.11%)</title><rect x="47.0857%" y="373" width="0.1143%" height="15" fill="rgb(244,186,29)" fg:x="412" fg:w="1"/><text x="47.3357%" y="383.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (1 samples, 0.11%)</title><rect x="47.0857%" y="357" width="0.1143%" height="15" fill="rgb(234,111,31)" fg:x="412" fg:w="1"/><text x="47.3357%" y="367.50"></text></g><g><title>crc32fast::baseline::update_slow (1 samples, 0.11%)</title><rect x="47.0857%" y="341" width="0.1143%" height="15" fill="rgb(241,149,10)" fg:x="412" fg:w="1"/><text x="47.3357%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="47.0857%" y="325" width="0.1143%" height="15" fill="rgb(249,206,44)" fg:x="412" fg:w="1"/><text x="47.3357%" y="335.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.34%)</title><rect x="46.9714%" y="421" width="0.3429%" height="15" fill="rgb(251,153,30)" fg:x="411" fg:w="3"/><text x="47.2214%" y="431.50"></text></g><g><title>&lt;flate2::gz::write::GzEncoder&lt;W&gt; as std::io::Write&gt;::write (3 samples, 0.34%)</title><rect x="46.9714%" y="405" width="0.3429%" height="15" fill="rgb(239,152,38)" fg:x="411" fg:w="3"/><text x="47.2214%" y="415.50"></text></g><g><title>flate2::gz::write::GzEncoder&lt;W&gt;::write_header (1 samples, 0.11%)</title><rect x="47.2000%" y="389" width="0.1143%" height="15" fill="rgb(249,139,47)" fg:x="413" fg:w="1"/><text x="47.4500%" y="399.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write (1 samples, 0.11%)</title><rect x="47.2000%" y="373" width="0.1143%" height="15" fill="rgb(244,64,35)" fg:x="413" fg:w="1"/><text x="47.4500%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.11%)</title><rect x="47.2000%" y="357" width="0.1143%" height="15" fill="rgb(216,46,15)" fg:x="413" fg:w="1"/><text x="47.4500%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.11%)</title><rect x="47.2000%" y="341" width="0.1143%" height="15" fill="rgb(250,74,19)" fg:x="413" fg:w="1"/><text x="47.4500%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.11%)</title><rect x="47.2000%" y="325" width="0.1143%" height="15" fill="rgb(249,42,33)" fg:x="413" fg:w="1"/><text x="47.4500%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.11%)</title><rect x="47.2000%" y="309" width="0.1143%" height="15" fill="rgb(242,149,17)" fg:x="413" fg:w="1"/><text x="47.4500%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.11%)</title><rect x="47.2000%" y="293" width="0.1143%" height="15" fill="rgb(244,29,21)" fg:x="413" fg:w="1"/><text x="47.4500%" y="303.50"></text></g><g><title>&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="47.3143%" y="357" width="0.1143%" height="15" fill="rgb(220,130,37)" fg:x="414" fg:w="1"/><text x="47.5643%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="47.3143%" y="341" width="0.1143%" height="15" fill="rgb(211,67,2)" fg:x="414" fg:w="1"/><text x="47.5643%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (1 samples, 0.11%)</title><rect x="47.3143%" y="325" width="0.1143%" height="15" fill="rgb(235,68,52)" fg:x="414" fg:w="1"/><text x="47.5643%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.11%)</title><rect x="47.3143%" y="309" width="0.1143%" height="15" fill="rgb(246,142,3)" fg:x="414" fg:w="1"/><text x="47.5643%" y="319.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="47.3143%" y="293" width="0.1143%" height="15" fill="rgb(241,25,7)" fg:x="414" fg:w="1"/><text x="47.5643%" y="303.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (1 samples, 0.11%)</title><rect x="47.3143%" y="277" width="0.1143%" height="15" fill="rgb(242,119,39)" fg:x="414" fg:w="1"/><text x="47.5643%" y="287.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.11%)</title><rect x="47.3143%" y="261" width="0.1143%" height="15" fill="rgb(241,98,45)" fg:x="414" fg:w="1"/><text x="47.5643%" y="271.50"></text></g><g><title>core::str::pattern::Searcher::next_match (1 samples, 0.11%)</title><rect x="47.3143%" y="245" width="0.1143%" height="15" fill="rgb(254,28,30)" fg:x="414" fg:w="1"/><text x="47.5643%" y="255.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (1 samples, 0.11%)</title><rect x="47.3143%" y="229" width="0.1143%" height="15" fill="rgb(241,142,54)" fg:x="414" fg:w="1"/><text x="47.5643%" y="239.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (1 samples, 0.11%)</title><rect x="47.3143%" y="213" width="0.1143%" height="15" fill="rgb(222,85,15)" fg:x="414" fg:w="1"/><text x="47.5643%" y="223.50"></text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::FnMut&lt;(char,)&gt;&gt;::call_mut (1 samples, 0.11%)</title><rect x="47.3143%" y="197" width="0.1143%" height="15" fill="rgb(210,85,47)" fg:x="414" fg:w="1"/><text x="47.5643%" y="207.50"></text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::Fn&lt;(char,)&gt;&gt;::call (1 samples, 0.11%)</title><rect x="47.3143%" y="181" width="0.1143%" height="15" fill="rgb(224,206,25)" fg:x="414" fg:w="1"/><text x="47.5643%" y="191.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (1 samples, 0.11%)</title><rect x="47.3143%" y="165" width="0.1143%" height="15" fill="rgb(243,201,19)" fg:x="414" fg:w="1"/><text x="47.5643%" y="175.50"></text></g><g><title>__rust_alloc (1 samples, 0.11%)</title><rect x="47.4286%" y="245" width="0.1143%" height="15" fill="rgb(236,59,4)" fg:x="415" fg:w="1"/><text x="47.6786%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (4 samples, 0.46%)</title><rect x="47.3143%" y="405" width="0.4571%" height="15" fill="rgb(254,179,45)" fg:x="414" fg:w="4"/><text x="47.5643%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.46%)</title><rect x="47.3143%" y="389" width="0.4571%" height="15" fill="rgb(226,14,10)" fg:x="414" fg:w="4"/><text x="47.5643%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (4 samples, 0.46%)</title><rect x="47.3143%" y="373" width="0.4571%" height="15" fill="rgb(244,27,41)" fg:x="414" fg:w="4"/><text x="47.5643%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.34%)</title><rect x="47.4286%" y="357" width="0.3429%" height="15" fill="rgb(235,35,32)" fg:x="415" fg:w="3"/><text x="47.6786%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.34%)</title><rect x="47.4286%" y="341" width="0.3429%" height="15" fill="rgb(218,68,31)" fg:x="415" fg:w="3"/><text x="47.6786%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.34%)</title><rect x="47.4286%" y="325" width="0.3429%" height="15" fill="rgb(207,120,37)" fg:x="415" fg:w="3"/><text x="47.6786%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.34%)</title><rect x="47.4286%" y="309" width="0.3429%" height="15" fill="rgb(227,98,0)" fg:x="415" fg:w="3"/><text x="47.6786%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.34%)</title><rect x="47.4286%" y="293" width="0.3429%" height="15" fill="rgb(207,7,3)" fg:x="415" fg:w="3"/><text x="47.6786%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.34%)</title><rect x="47.4286%" y="277" width="0.3429%" height="15" fill="rgb(206,98,19)" fg:x="415" fg:w="3"/><text x="47.6786%" y="287.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.34%)</title><rect x="47.4286%" y="261" width="0.3429%" height="15" fill="rgb(217,5,26)" fg:x="415" fg:w="3"/><text x="47.6786%" y="271.50"></text></g><g><title>malloc (2 samples, 0.23%)</title><rect x="47.5429%" y="245" width="0.2286%" height="15" fill="rgb(235,190,38)" fg:x="416" fg:w="2"/><text x="47.7929%" y="255.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.11%)</title><rect x="47.7714%" y="405" width="0.1143%" height="15" fill="rgb(247,86,24)" fg:x="418" fg:w="1"/><text x="48.0214%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.11%)</title><rect x="47.7714%" y="389" width="0.1143%" height="15" fill="rgb(205,101,16)" fg:x="418" fg:w="1"/><text x="48.0214%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.11%)</title><rect x="47.7714%" y="373" width="0.1143%" height="15" fill="rgb(246,168,33)" fg:x="418" fg:w="1"/><text x="48.0214%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.11%)</title><rect x="47.7714%" y="357" width="0.1143%" height="15" fill="rgb(231,114,1)" fg:x="418" fg:w="1"/><text x="48.0214%" y="367.50"></text></g><g><title>malloc (1 samples, 0.11%)</title><rect x="47.7714%" y="341" width="0.1143%" height="15" fill="rgb(207,184,53)" fg:x="418" fg:w="1"/><text x="48.0214%" y="351.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.11%)</title><rect x="47.8857%" y="389" width="0.1143%" height="15" fill="rgb(224,95,51)" fg:x="419" fg:w="1"/><text x="48.1357%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.11%)</title><rect x="47.8857%" y="373" width="0.1143%" height="15" fill="rgb(212,188,45)" fg:x="419" fg:w="1"/><text x="48.1357%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.11%)</title><rect x="47.8857%" y="357" width="0.1143%" height="15" fill="rgb(223,154,38)" fg:x="419" fg:w="1"/><text x="48.1357%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.11%)</title><rect x="47.8857%" y="341" width="0.1143%" height="15" fill="rgb(251,22,52)" fg:x="419" fg:w="1"/><text x="48.1357%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.11%)</title><rect x="47.8857%" y="325" width="0.1143%" height="15" fill="rgb(229,209,22)" fg:x="419" fg:w="1"/><text x="48.1357%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.11%)</title><rect x="47.8857%" y="309" width="0.1143%" height="15" fill="rgb(234,138,34)" fg:x="419" fg:w="1"/><text x="48.1357%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.11%)</title><rect x="47.8857%" y="293" width="0.1143%" height="15" fill="rgb(212,95,11)" fg:x="419" fg:w="1"/><text x="48.1357%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.11%)</title><rect x="47.8857%" y="277" width="0.1143%" height="15" fill="rgb(240,179,47)" fg:x="419" fg:w="1"/><text x="48.1357%" y="287.50"></text></g><g><title>malloc (1 samples, 0.11%)</title><rect x="47.8857%" y="261" width="0.1143%" height="15" fill="rgb(240,163,11)" fg:x="419" fg:w="1"/><text x="48.1357%" y="271.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.11%)</title><rect x="48.0000%" y="389" width="0.1143%" height="15" fill="rgb(236,37,12)" fg:x="420" fg:w="1"/><text x="48.2500%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.11%)</title><rect x="48.0000%" y="373" width="0.1143%" height="15" fill="rgb(232,164,16)" fg:x="420" fg:w="1"/><text x="48.2500%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.11%)</title><rect x="48.0000%" y="357" width="0.1143%" height="15" fill="rgb(244,205,15)" fg:x="420" fg:w="1"/><text x="48.2500%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.11%)</title><rect x="48.0000%" y="341" width="0.1143%" height="15" fill="rgb(223,117,47)" fg:x="420" fg:w="1"/><text x="48.2500%" y="351.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (3 samples, 0.34%)</title><rect x="47.8857%" y="405" width="0.3429%" height="15" fill="rgb(244,107,35)" fg:x="419" fg:w="3"/><text x="48.1357%" y="415.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_lower (1 samples, 0.11%)</title><rect x="48.1143%" y="389" width="0.1143%" height="15" fill="rgb(205,140,8)" fg:x="421" fg:w="1"/><text x="48.3643%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.11%)</title><rect x="48.2286%" y="389" width="0.1143%" height="15" fill="rgb(228,84,46)" fg:x="422" fg:w="1"/><text x="48.4786%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.11%)</title><rect x="48.2286%" y="373" width="0.1143%" height="15" fill="rgb(254,188,9)" fg:x="422" fg:w="1"/><text x="48.4786%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="48.2286%" y="357" width="0.1143%" height="15" fill="rgb(206,112,54)" fg:x="422" fg:w="1"/><text x="48.4786%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.11%)</title><rect x="48.2286%" y="341" width="0.1143%" height="15" fill="rgb(216,84,49)" fg:x="422" fg:w="1"/><text x="48.4786%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.11%)</title><rect x="48.2286%" y="325" width="0.1143%" height="15" fill="rgb(214,194,35)" fg:x="422" fg:w="1"/><text x="48.4786%" y="335.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.11%)</title><rect x="48.2286%" y="309" width="0.1143%" height="15" fill="rgb(249,28,3)" fg:x="422" fg:w="1"/><text x="48.4786%" y="319.50"></text></g><g><title>realloc (1 samples, 0.11%)</title><rect x="48.2286%" y="293" width="0.1143%" height="15" fill="rgb(222,56,52)" fg:x="422" fg:w="1"/><text x="48.4786%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.11%)</title><rect x="48.2286%" y="277" width="0.1143%" height="15" fill="rgb(245,217,50)" fg:x="422" fg:w="1"/><text x="48.4786%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.23%)</title><rect x="48.2286%" y="405" width="0.2286%" height="15" fill="rgb(213,201,24)" fg:x="422" fg:w="2"/><text x="48.4786%" y="415.50"></text></g><g><title>core::ptr::write (1 samples, 0.11%)</title><rect x="48.3429%" y="389" width="0.1143%" height="15" fill="rgb(248,116,28)" fg:x="423" fg:w="1"/><text x="48.5929%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.11%)</title><rect x="48.4571%" y="117" width="0.1143%" height="15" fill="rgb(219,72,43)" fg:x="424" fg:w="1"/><text x="48.7071%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.11%)</title><rect x="48.4571%" y="101" width="0.1143%" height="15" fill="rgb(209,138,14)" fg:x="424" fg:w="1"/><text x="48.7071%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="48.4571%" y="85" width="0.1143%" height="15" fill="rgb(222,18,33)" fg:x="424" fg:w="1"/><text x="48.7071%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.11%)</title><rect x="48.4571%" y="69" width="0.1143%" height="15" fill="rgb(213,199,7)" fg:x="424" fg:w="1"/><text x="48.7071%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="48.4571%" y="53" width="0.1143%" height="15" fill="rgb(250,110,10)" fg:x="424" fg:w="1"/><text x="48.7071%" y="63.50"></text></g><g><title>malloc (1 samples, 0.11%)</title><rect x="48.4571%" y="37" width="0.1143%" height="15" fill="rgb(248,123,6)" fg:x="424" fg:w="1"/><text x="48.7071%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.34%)</title><rect x="48.4571%" y="197" width="0.3429%" height="15" fill="rgb(206,91,31)" fg:x="424" fg:w="3"/><text x="48.7071%" y="207.50"></text></g><g><title>alloc::string::String::push_str (3 samples, 0.34%)</title><rect x="48.4571%" y="181" width="0.3429%" height="15" fill="rgb(211,154,13)" fg:x="424" fg:w="3"/><text x="48.7071%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 0.34%)</title><rect x="48.4571%" y="165" width="0.3429%" height="15" fill="rgb(225,148,7)" fg:x="424" fg:w="3"/><text x="48.7071%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.34%)</title><rect x="48.4571%" y="149" width="0.3429%" height="15" fill="rgb(220,160,43)" fg:x="424" fg:w="3"/><text x="48.7071%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 0.34%)</title><rect x="48.4571%" y="133" width="0.3429%" height="15" fill="rgb(213,52,39)" fg:x="424" fg:w="3"/><text x="48.7071%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.23%)</title><rect x="48.5714%" y="117" width="0.2286%" height="15" fill="rgb(243,137,7)" fg:x="425" fg:w="2"/><text x="48.8214%" y="127.50"></text></g><g><title>[libc.so.6] (1 samples, 0.11%)</title><rect x="48.6857%" y="101" width="0.1143%" height="15" fill="rgb(230,79,13)" fg:x="426" fg:w="1"/><text x="48.9357%" y="111.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (1 samples, 0.11%)</title><rect x="48.8000%" y="197" width="0.1143%" height="15" fill="rgb(247,105,23)" fg:x="427" fg:w="1"/><text x="49.0500%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (5 samples, 0.57%)</title><rect x="48.4571%" y="405" width="0.5714%" height="15" fill="rgb(223,179,41)" fg:x="424" fg:w="5"/><text x="48.7071%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (5 samples, 0.57%)</title><rect x="48.4571%" y="389" width="0.5714%" height="15" fill="rgb(218,9,34)" fg:x="424" fg:w="5"/><text x="48.7071%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.57%)</title><rect x="48.4571%" y="373" width="0.5714%" height="15" fill="rgb(222,106,8)" fg:x="424" fg:w="5"/><text x="48.7071%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (5 samples, 0.57%)</title><rect x="48.4571%" y="357" width="0.5714%" height="15" fill="rgb(211,220,0)" fg:x="424" fg:w="5"/><text x="48.7071%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (5 samples, 0.57%)</title><rect x="48.4571%" y="341" width="0.5714%" height="15" fill="rgb(229,52,16)" fg:x="424" fg:w="5"/><text x="48.7071%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (5 samples, 0.57%)</title><rect x="48.4571%" y="325" width="0.5714%" height="15" fill="rgb(212,155,18)" fg:x="424" fg:w="5"/><text x="48.7071%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (5 samples, 0.57%)</title><rect x="48.4571%" y="309" width="0.5714%" height="15" fill="rgb(242,21,14)" fg:x="424" fg:w="5"/><text x="48.7071%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.57%)</title><rect x="48.4571%" y="293" width="0.5714%" height="15" fill="rgb(222,19,48)" fg:x="424" fg:w="5"/><text x="48.7071%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (5 samples, 0.57%)</title><rect x="48.4571%" y="277" width="0.5714%" height="15" fill="rgb(232,45,27)" fg:x="424" fg:w="5"/><text x="48.7071%" y="287.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (5 samples, 0.57%)</title><rect x="48.4571%" y="261" width="0.5714%" height="15" fill="rgb(249,103,42)" fg:x="424" fg:w="5"/><text x="48.7071%" y="271.50"></text></g><g><title>tinyhttp_internal::http::build_and_parse_req::{{closure}} (5 samples, 0.57%)</title><rect x="48.4571%" y="245" width="0.5714%" height="15" fill="rgb(246,81,33)" fg:x="424" fg:w="5"/><text x="48.7071%" y="255.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (5 samples, 0.57%)</title><rect x="48.4571%" y="229" width="0.5714%" height="15" fill="rgb(252,33,42)" fg:x="424" fg:w="5"/><text x="48.7071%" y="239.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (5 samples, 0.57%)</title><rect x="48.4571%" y="213" width="0.5714%" height="15" fill="rgb(209,212,41)" fg:x="424" fg:w="5"/><text x="48.7071%" y="223.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.11%)</title><rect x="48.9143%" y="197" width="0.1143%" height="15" fill="rgb(207,154,6)" fg:x="428" fg:w="1"/><text x="49.1643%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::{{closure}} (1 samples, 0.11%)</title><rect x="49.0286%" y="357" width="0.1143%" height="15" fill="rgb(223,64,47)" fg:x="429" fg:w="1"/><text x="49.2786%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (1 samples, 0.11%)</title><rect x="49.0286%" y="341" width="0.1143%" height="15" fill="rgb(211,161,38)" fg:x="429" fg:w="1"/><text x="49.2786%" y="351.50"></text></g><g><title>tinyhttp_internal::http::build_and_parse_req::{{closure}} (1 samples, 0.11%)</title><rect x="49.0286%" y="325" width="0.1143%" height="15" fill="rgb(219,138,40)" fg:x="429" fg:w="1"/><text x="49.2786%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (2 samples, 0.23%)</title><rect x="49.0286%" y="405" width="0.2286%" height="15" fill="rgb(241,228,46)" fg:x="429" fg:w="2"/><text x="49.2786%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.23%)</title><rect x="49.0286%" y="389" width="0.2286%" height="15" fill="rgb(223,209,38)" fg:x="429" fg:w="2"/><text x="49.2786%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.23%)</title><rect x="49.0286%" y="373" width="0.2286%" height="15" fill="rgb(236,164,45)" fg:x="429" fg:w="2"/><text x="49.2786%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Windows&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="49.1429%" y="357" width="0.1143%" height="15" fill="rgb(231,15,5)" fg:x="430" fg:w="1"/><text x="49.3929%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.11%)</title><rect x="49.2571%" y="405" width="0.1143%" height="15" fill="rgb(252,35,15)" fg:x="431" fg:w="1"/><text x="49.5071%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.11%)</title><rect x="49.2571%" y="389" width="0.1143%" height="15" fill="rgb(248,181,18)" fg:x="431" fg:w="1"/><text x="49.5071%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.11%)</title><rect x="49.2571%" y="373" width="0.1143%" height="15" fill="rgb(233,39,42)" fg:x="431" fg:w="1"/><text x="49.5071%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="49.2571%" y="357" width="0.1143%" height="15" fill="rgb(238,110,33)" fg:x="431" fg:w="1"/><text x="49.5071%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;&amp;str&gt;&gt; (1 samples, 0.11%)</title><rect x="49.3714%" y="405" width="0.1143%" height="15" fill="rgb(233,195,10)" fg:x="432" fg:w="1"/><text x="49.6214%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;str&gt;&gt; (1 samples, 0.11%)</title><rect x="49.3714%" y="389" width="0.1143%" height="15" fill="rgb(254,105,3)" fg:x="432" fg:w="1"/><text x="49.6214%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="49.3714%" y="373" width="0.1143%" height="15" fill="rgb(221,225,9)" fg:x="432" fg:w="1"/><text x="49.6214%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.11%)</title><rect x="49.3714%" y="357" width="0.1143%" height="15" fill="rgb(224,227,45)" fg:x="432" fg:w="1"/><text x="49.6214%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.11%)</title><rect x="49.3714%" y="341" width="0.1143%" height="15" fill="rgb(229,198,43)" fg:x="432" fg:w="1"/><text x="49.6214%" y="351.50"></text></g><g><title>cfree (1 samples, 0.11%)</title><rect x="49.3714%" y="325" width="0.1143%" height="15" fill="rgb(206,209,35)" fg:x="432" fg:w="1"/><text x="49.6214%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (2 samples, 0.23%)</title><rect x="49.4857%" y="405" width="0.2286%" height="15" fill="rgb(245,195,53)" fg:x="433" fg:w="2"/><text x="49.7357%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (2 samples, 0.23%)</title><rect x="49.4857%" y="389" width="0.2286%" height="15" fill="rgb(240,92,26)" fg:x="433" fg:w="2"/><text x="49.7357%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.23%)</title><rect x="49.4857%" y="373" width="0.2286%" height="15" fill="rgb(207,40,23)" fg:x="433" fg:w="2"/><text x="49.7357%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.23%)</title><rect x="49.4857%" y="357" width="0.2286%" height="15" fill="rgb(223,111,35)" fg:x="433" fg:w="2"/><text x="49.7357%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.23%)</title><rect x="49.4857%" y="341" width="0.2286%" height="15" fill="rgb(229,147,28)" fg:x="433" fg:w="2"/><text x="49.7357%" y="351.50"></text></g><g><title>cfree (2 samples, 0.23%)</title><rect x="49.4857%" y="325" width="0.2286%" height="15" fill="rgb(211,29,28)" fg:x="433" fg:w="2"/><text x="49.7357%" y="335.50"></text></g><g><title>[libc.so.6] (1 samples, 0.11%)</title><rect x="49.6000%" y="309" width="0.1143%" height="15" fill="rgb(228,72,33)" fg:x="434" fg:w="1"/><text x="49.8500%" y="319.50"></text></g><g><title>tinyhttp_internal::http::build_and_parse_req (22 samples, 2.51%)</title><rect x="47.3143%" y="421" width="2.5143%" height="15" fill="rgb(205,214,31)" fg:x="414" fg:w="22"/><text x="47.5643%" y="431.50">ti..</text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.11%)</title><rect x="49.7143%" y="405" width="0.1143%" height="15" fill="rgb(224,111,15)" fg:x="435" fg:w="1"/><text x="49.9643%" y="415.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.11%)</title><rect x="49.7143%" y="389" width="0.1143%" height="15" fill="rgb(253,21,26)" fg:x="435" fg:w="1"/><text x="49.9643%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.34%)</title><rect x="49.8286%" y="309" width="0.3429%" height="15" fill="rgb(245,139,43)" fg:x="436" fg:w="3"/><text x="50.0786%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.34%)</title><rect x="49.8286%" y="293" width="0.3429%" height="15" fill="rgb(252,170,7)" fg:x="436" fg:w="3"/><text x="50.0786%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.34%)</title><rect x="49.8286%" y="277" width="0.3429%" height="15" fill="rgb(231,118,14)" fg:x="436" fg:w="3"/><text x="50.0786%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.34%)</title><rect x="49.8286%" y="261" width="0.3429%" height="15" fill="rgb(238,83,0)" fg:x="436" fg:w="3"/><text x="50.0786%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.34%)</title><rect x="49.8286%" y="245" width="0.3429%" height="15" fill="rgb(221,39,39)" fg:x="436" fg:w="3"/><text x="50.0786%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.34%)</title><rect x="49.8286%" y="229" width="0.3429%" height="15" fill="rgb(222,119,46)" fg:x="436" fg:w="3"/><text x="50.0786%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.34%)</title><rect x="49.8286%" y="213" width="0.3429%" height="15" fill="rgb(222,165,49)" fg:x="436" fg:w="3"/><text x="50.0786%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.34%)</title><rect x="49.8286%" y="197" width="0.3429%" height="15" fill="rgb(219,113,52)" fg:x="436" fg:w="3"/><text x="50.0786%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.34%)</title><rect x="49.8286%" y="181" width="0.3429%" height="15" fill="rgb(214,7,15)" fg:x="436" fg:w="3"/><text x="50.0786%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.34%)</title><rect x="49.8286%" y="165" width="0.3429%" height="15" fill="rgb(235,32,4)" fg:x="436" fg:w="3"/><text x="50.0786%" y="175.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.34%)</title><rect x="49.8286%" y="149" width="0.3429%" height="15" fill="rgb(238,90,54)" fg:x="436" fg:w="3"/><text x="50.0786%" y="159.50"></text></g><g><title>malloc (3 samples, 0.34%)</title><rect x="49.8286%" y="133" width="0.3429%" height="15" fill="rgb(213,208,19)" fg:x="436" fg:w="3"/><text x="50.0786%" y="143.50"></text></g><g><title>[libc.so.6] (2 samples, 0.23%)</title><rect x="49.9429%" y="117" width="0.2286%" height="15" fill="rgb(233,156,4)" fg:x="437" fg:w="2"/><text x="50.1929%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.23%)</title><rect x="50.1714%" y="309" width="0.2286%" height="15" fill="rgb(207,194,5)" fg:x="439" fg:w="2"/><text x="50.4214%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.23%)</title><rect x="50.1714%" y="293" width="0.2286%" height="15" fill="rgb(206,111,30)" fg:x="439" fg:w="2"/><text x="50.4214%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.23%)</title><rect x="50.1714%" y="277" width="0.2286%" height="15" fill="rgb(243,70,54)" fg:x="439" fg:w="2"/><text x="50.4214%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.23%)</title><rect x="50.1714%" y="261" width="0.2286%" height="15" fill="rgb(242,28,8)" fg:x="439" fg:w="2"/><text x="50.4214%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.23%)</title><rect x="50.1714%" y="245" width="0.2286%" height="15" fill="rgb(219,106,18)" fg:x="439" fg:w="2"/><text x="50.4214%" y="255.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.23%)</title><rect x="50.1714%" y="229" width="0.2286%" height="15" fill="rgb(244,222,10)" fg:x="439" fg:w="2"/><text x="50.4214%" y="239.50"></text></g><g><title>malloc (2 samples, 0.23%)</title><rect x="50.1714%" y="213" width="0.2286%" height="15" fill="rgb(236,179,52)" fg:x="439" fg:w="2"/><text x="50.4214%" y="223.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (6 samples, 0.69%)</title><rect x="49.8286%" y="405" width="0.6857%" height="15" fill="rgb(213,23,39)" fg:x="436" fg:w="6"/><text x="50.0786%" y="415.50"></text></g><g><title>&lt;tinyhttp_internal::request::Request as core::clone::Clone&gt;::clone (6 samples, 0.69%)</title><rect x="49.8286%" y="389" width="0.6857%" height="15" fill="rgb(238,48,10)" fg:x="436" fg:w="6"/><text x="50.0786%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.69%)</title><rect x="49.8286%" y="373" width="0.6857%" height="15" fill="rgb(251,196,23)" fg:x="436" fg:w="6"/><text x="50.0786%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 0.69%)</title><rect x="49.8286%" y="357" width="0.6857%" height="15" fill="rgb(250,152,24)" fg:x="436" fg:w="6"/><text x="50.0786%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.69%)</title><rect x="49.8286%" y="341" width="0.6857%" height="15" fill="rgb(209,150,17)" fg:x="436" fg:w="6"/><text x="50.0786%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 0.69%)</title><rect x="49.8286%" y="325" width="0.6857%" height="15" fill="rgb(234,202,34)" fg:x="436" fg:w="6"/><text x="50.0786%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.11%)</title><rect x="50.4000%" y="309" width="0.1143%" height="15" fill="rgb(253,148,53)" fg:x="441" fg:w="1"/><text x="50.6500%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.11%)</title><rect x="50.4000%" y="293" width="0.1143%" height="15" fill="rgb(218,129,16)" fg:x="441" fg:w="1"/><text x="50.6500%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.11%)</title><rect x="50.4000%" y="277" width="0.1143%" height="15" fill="rgb(216,85,19)" fg:x="441" fg:w="1"/><text x="50.6500%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;tinyhttp_internal::request::Request&gt; (1 samples, 0.11%)</title><rect x="50.5143%" y="389" width="0.1143%" height="15" fill="rgb(235,228,7)" fg:x="442" fg:w="1"/><text x="50.7643%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (1 samples, 0.11%)</title><rect x="50.5143%" y="373" width="0.1143%" height="15" fill="rgb(245,175,0)" fg:x="442" fg:w="1"/><text x="50.7643%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="50.5143%" y="357" width="0.1143%" height="15" fill="rgb(208,168,36)" fg:x="442" fg:w="1"/><text x="50.7643%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (1 samples, 0.11%)</title><rect x="50.5143%" y="341" width="0.1143%" height="15" fill="rgb(246,171,24)" fg:x="442" fg:w="1"/><text x="50.7643%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.11%)</title><rect x="50.5143%" y="325" width="0.1143%" height="15" fill="rgb(215,142,24)" fg:x="442" fg:w="1"/><text x="50.7643%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.11%)</title><rect x="50.5143%" y="309" width="0.1143%" height="15" fill="rgb(250,187,7)" fg:x="442" fg:w="1"/><text x="50.7643%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.11%)</title><rect x="50.5143%" y="293" width="0.1143%" height="15" fill="rgb(228,66,33)" fg:x="442" fg:w="1"/><text x="50.7643%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="50.5143%" y="277" width="0.1143%" height="15" fill="rgb(234,215,21)" fg:x="442" fg:w="1"/><text x="50.7643%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.11%)</title><rect x="50.5143%" y="261" width="0.1143%" height="15" fill="rgb(222,191,20)" fg:x="442" fg:w="1"/><text x="50.7643%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.11%)</title><rect x="50.5143%" y="245" width="0.1143%" height="15" fill="rgb(245,79,54)" fg:x="442" fg:w="1"/><text x="50.7643%" y="255.50"></text></g><g><title>cfree (1 samples, 0.11%)</title><rect x="50.5143%" y="229" width="0.1143%" height="15" fill="rgb(240,10,37)" fg:x="442" fg:w="1"/><text x="50.7643%" y="239.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.11%)</title><rect x="50.6286%" y="373" width="0.1143%" height="15" fill="rgb(214,192,32)" fg:x="443" fg:w="1"/><text x="50.8786%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.11%)</title><rect x="50.6286%" y="357" width="0.1143%" height="15" fill="rgb(209,36,54)" fg:x="443" fg:w="1"/><text x="50.8786%" y="367.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.11%)</title><rect x="50.6286%" y="341" width="0.1143%" height="15" fill="rgb(220,10,11)" fg:x="443" fg:w="1"/><text x="50.8786%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.11%)</title><rect x="50.6286%" y="325" width="0.1143%" height="15" fill="rgb(221,106,17)" fg:x="443" fg:w="1"/><text x="50.8786%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.11%)</title><rect x="50.6286%" y="309" width="0.1143%" height="15" fill="rgb(251,142,44)" fg:x="443" fg:w="1"/><text x="50.8786%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.11%)</title><rect x="50.6286%" y="293" width="0.1143%" height="15" fill="rgb(238,13,15)" fg:x="443" fg:w="1"/><text x="50.8786%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.11%)</title><rect x="50.6286%" y="277" width="0.1143%" height="15" fill="rgb(208,107,27)" fg:x="443" fg:w="1"/><text x="50.8786%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.11%)</title><rect x="50.6286%" y="261" width="0.1143%" height="15" fill="rgb(205,136,37)" fg:x="443" fg:w="1"/><text x="50.8786%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.11%)</title><rect x="50.6286%" y="245" width="0.1143%" height="15" fill="rgb(250,205,27)" fg:x="443" fg:w="1"/><text x="50.8786%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.11%)</title><rect x="50.6286%" y="229" width="0.1143%" height="15" fill="rgb(210,80,43)" fg:x="443" fg:w="1"/><text x="50.8786%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.11%)</title><rect x="50.6286%" y="213" width="0.1143%" height="15" fill="rgb(247,160,36)" fg:x="443" fg:w="1"/><text x="50.8786%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.11%)</title><rect x="50.6286%" y="197" width="0.1143%" height="15" fill="rgb(234,13,49)" fg:x="443" fg:w="1"/><text x="50.8786%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.11%)</title><rect x="50.6286%" y="181" width="0.1143%" height="15" fill="rgb(234,122,0)" fg:x="443" fg:w="1"/><text x="50.8786%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.11%)</title><rect x="50.6286%" y="165" width="0.1143%" height="15" fill="rgb(207,146,38)" fg:x="443" fg:w="1"/><text x="50.8786%" y="175.50"></text></g><g><title>malloc (1 samples, 0.11%)</title><rect x="50.6286%" y="149" width="0.1143%" height="15" fill="rgb(207,177,25)" fg:x="443" fg:w="1"/><text x="50.8786%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.11%)</title><rect x="50.6286%" y="133" width="0.1143%" height="15" fill="rgb(211,178,42)" fg:x="443" fg:w="1"/><text x="50.8786%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::ops::arith::Add&lt;&amp;str&gt;&gt;::add (1 samples, 0.11%)</title><rect x="50.7429%" y="373" width="0.1143%" height="15" fill="rgb(230,69,54)" fg:x="444" fg:w="1"/><text x="50.9929%" y="383.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.11%)</title><rect x="50.7429%" y="357" width="0.1143%" height="15" fill="rgb(214,135,41)" fg:x="444" fg:w="1"/><text x="50.9929%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.11%)</title><rect x="50.7429%" y="341" width="0.1143%" height="15" fill="rgb(237,67,25)" fg:x="444" fg:w="1"/><text x="50.9929%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.11%)</title><rect x="50.7429%" y="325" width="0.1143%" height="15" fill="rgb(222,189,50)" fg:x="444" fg:w="1"/><text x="50.9929%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.11%)</title><rect x="50.7429%" y="309" width="0.1143%" height="15" fill="rgb(245,148,34)" fg:x="444" fg:w="1"/><text x="50.9929%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.11%)</title><rect x="50.7429%" y="293" width="0.1143%" height="15" fill="rgb(222,29,6)" fg:x="444" fg:w="1"/><text x="50.9929%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.11%)</title><rect x="50.7429%" y="277" width="0.1143%" height="15" fill="rgb(221,189,43)" fg:x="444" fg:w="1"/><text x="50.9929%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="50.7429%" y="261" width="0.1143%" height="15" fill="rgb(207,36,27)" fg:x="444" fg:w="1"/><text x="50.9929%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.11%)</title><rect x="50.7429%" y="245" width="0.1143%" height="15" fill="rgb(217,90,24)" fg:x="444" fg:w="1"/><text x="50.9929%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.11%)</title><rect x="50.7429%" y="229" width="0.1143%" height="15" fill="rgb(224,66,35)" fg:x="444" fg:w="1"/><text x="50.9929%" y="239.50"></text></g><g><title>&lt;tinyhttp_internal::codegen::route::BasicGetRoute as tinyhttp_internal::config::ToResponse&gt;::to_res (4 samples, 0.46%)</title><rect x="50.5143%" y="405" width="0.4571%" height="15" fill="rgb(221,13,50)" fg:x="442" fg:w="4"/><text x="50.7643%" y="415.50"></text></g><g><title>tinyhttp_internal::response::Response::status_line (3 samples, 0.34%)</title><rect x="50.6286%" y="389" width="0.3429%" height="15" fill="rgb(236,68,49)" fg:x="443" fg:w="3"/><text x="50.8786%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.11%)</title><rect x="50.8571%" y="373" width="0.1143%" height="15" fill="rgb(229,146,28)" fg:x="445" fg:w="1"/><text x="51.1071%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.11%)</title><rect x="50.8571%" y="357" width="0.1143%" height="15" fill="rgb(225,31,38)" fg:x="445" fg:w="1"/><text x="51.1071%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.11%)</title><rect x="50.8571%" y="341" width="0.1143%" height="15" fill="rgb(250,208,3)" fg:x="445" fg:w="1"/><text x="51.1071%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="50.8571%" y="325" width="0.1143%" height="15" fill="rgb(246,54,23)" fg:x="445" fg:w="1"/><text x="51.1071%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.11%)</title><rect x="50.8571%" y="309" width="0.1143%" height="15" fill="rgb(243,76,11)" fg:x="445" fg:w="1"/><text x="51.1071%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.11%)</title><rect x="50.8571%" y="293" width="0.1143%" height="15" fill="rgb(245,21,50)" fg:x="445" fg:w="1"/><text x="51.1071%" y="303.50"></text></g><g><title>cfree (1 samples, 0.11%)</title><rect x="50.8571%" y="277" width="0.1143%" height="15" fill="rgb(228,9,43)" fg:x="445" fg:w="1"/><text x="51.1071%" y="287.50"></text></g><g><title>[libc.so.6] (1 samples, 0.11%)</title><rect x="50.8571%" y="261" width="0.1143%" height="15" fill="rgb(208,100,47)" fg:x="445" fg:w="1"/><text x="51.1071%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn tinyhttp_internal::config::Route&gt;&gt; (1 samples, 0.11%)</title><rect x="50.9714%" y="405" width="0.1143%" height="15" fill="rgb(232,26,8)" fg:x="446" fg:w="1"/><text x="51.2214%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;tinyhttp_internal::codegen::route::BasicGetRoute&gt; (1 samples, 0.11%)</title><rect x="50.9714%" y="389" width="0.1143%" height="15" fill="rgb(216,166,38)" fg:x="446" fg:w="1"/><text x="51.2214%" y="399.50"></text></g><g><title>tinyhttp_internal::http::build_res (12 samples, 1.37%)</title><rect x="49.8286%" y="421" width="1.3714%" height="15" fill="rgb(251,202,51)" fg:x="436" fg:w="12"/><text x="50.0786%" y="431.50"></text></g><g><title>tinyhttp_internal::config::Config::get_routes (1 samples, 0.11%)</title><rect x="51.0857%" y="405" width="0.1143%" height="15" fill="rgb(254,216,34)" fg:x="447" fg:w="1"/><text x="51.3357%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::matches (1 samples, 0.11%)</title><rect x="51.0857%" y="389" width="0.1143%" height="15" fill="rgb(251,32,27)" fg:x="447" fg:w="1"/><text x="51.3357%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.23%)</title><rect x="51.2000%" y="341" width="0.2286%" height="15" fill="rgb(208,127,28)" fg:x="448" fg:w="2"/><text x="51.4500%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.23%)</title><rect x="51.2000%" y="325" width="0.2286%" height="15" fill="rgb(224,137,22)" fg:x="448" fg:w="2"/><text x="51.4500%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.23%)</title><rect x="51.2000%" y="309" width="0.2286%" height="15" fill="rgb(254,70,32)" fg:x="448" fg:w="2"/><text x="51.4500%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.23%)</title><rect x="51.2000%" y="293" width="0.2286%" height="15" fill="rgb(229,75,37)" fg:x="448" fg:w="2"/><text x="51.4500%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.23%)</title><rect x="51.2000%" y="277" width="0.2286%" height="15" fill="rgb(252,64,23)" fg:x="448" fg:w="2"/><text x="51.4500%" y="287.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.23%)</title><rect x="51.2000%" y="261" width="0.2286%" height="15" fill="rgb(232,162,48)" fg:x="448" fg:w="2"/><text x="51.4500%" y="271.50"></text></g><g><title>malloc (2 samples, 0.23%)</title><rect x="51.2000%" y="245" width="0.2286%" height="15" fill="rgb(246,160,12)" fg:x="448" fg:w="2"/><text x="51.4500%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3 samples, 0.34%)</title><rect x="51.2000%" y="405" width="0.3429%" height="15" fill="rgb(247,166,0)" fg:x="448" fg:w="3"/><text x="51.4500%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.34%)</title><rect x="51.2000%" y="389" width="0.3429%" height="15" fill="rgb(249,219,21)" fg:x="448" fg:w="3"/><text x="51.4500%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.34%)</title><rect x="51.2000%" y="373" width="0.3429%" height="15" fill="rgb(205,209,3)" fg:x="448" fg:w="3"/><text x="51.4500%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.34%)</title><rect x="51.2000%" y="357" width="0.3429%" height="15" fill="rgb(243,44,1)" fg:x="448" fg:w="3"/><text x="51.4500%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.11%)</title><rect x="51.4286%" y="341" width="0.1143%" height="15" fill="rgb(206,159,16)" fg:x="450" fg:w="1"/><text x="51.6786%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.11%)</title><rect x="51.4286%" y="325" width="0.1143%" height="15" fill="rgb(244,77,30)" fg:x="450" fg:w="1"/><text x="51.6786%" y="335.50"></text></g><g><title>[libc.so.6] (1 samples, 0.11%)</title><rect x="51.4286%" y="309" width="0.1143%" height="15" fill="rgb(218,69,12)" fg:x="450" fg:w="1"/><text x="51.6786%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (1 samples, 0.11%)</title><rect x="51.5429%" y="405" width="0.1143%" height="15" fill="rgb(212,87,7)" fg:x="451" fg:w="1"/><text x="51.7929%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.11%)</title><rect x="51.5429%" y="389" width="0.1143%" height="15" fill="rgb(245,114,25)" fg:x="451" fg:w="1"/><text x="51.7929%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.11%)</title><rect x="51.5429%" y="373" width="0.1143%" height="15" fill="rgb(210,61,42)" fg:x="451" fg:w="1"/><text x="51.7929%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.11%)</title><rect x="51.5429%" y="357" width="0.1143%" height="15" fill="rgb(211,52,33)" fg:x="451" fg:w="1"/><text x="51.7929%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="51.5429%" y="341" width="0.1143%" height="15" fill="rgb(234,58,33)" fg:x="451" fg:w="1"/><text x="51.7929%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.11%)</title><rect x="51.5429%" y="325" width="0.1143%" height="15" fill="rgb(220,115,36)" fg:x="451" fg:w="1"/><text x="51.7929%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="51.5429%" y="309" width="0.1143%" height="15" fill="rgb(243,153,54)" fg:x="451" fg:w="1"/><text x="51.7929%" y="319.50"></text></g><g><title>malloc (1 samples, 0.11%)</title><rect x="51.5429%" y="293" width="0.1143%" height="15" fill="rgb(251,47,18)" fg:x="451" fg:w="1"/><text x="51.7929%" y="303.50"></text></g><g><title>alloc::vec::from_elem (16 samples, 1.83%)</title><rect x="51.6571%" y="405" width="1.8286%" height="15" fill="rgb(242,102,42)" fg:x="452" fg:w="16"/><text x="51.9071%" y="415.50">a..</text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (16 samples, 1.83%)</title><rect x="51.6571%" y="389" width="1.8286%" height="15" fill="rgb(234,31,38)" fg:x="452" fg:w="16"/><text x="51.9071%" y="399.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (16 samples, 1.83%)</title><rect x="51.6571%" y="373" width="1.8286%" height="15" fill="rgb(221,117,51)" fg:x="452" fg:w="16"/><text x="51.9071%" y="383.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 1.83%)</title><rect x="51.6571%" y="357" width="1.8286%" height="15" fill="rgb(212,20,18)" fg:x="452" fg:w="16"/><text x="51.9071%" y="367.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (16 samples, 1.83%)</title><rect x="51.6571%" y="341" width="1.8286%" height="15" fill="rgb(245,133,36)" fg:x="452" fg:w="16"/><text x="51.9071%" y="351.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 1.83%)</title><rect x="51.6571%" y="325" width="1.8286%" height="15" fill="rgb(212,6,19)" fg:x="452" fg:w="16"/><text x="51.9071%" y="335.50">a..</text></g><g><title>alloc::alloc::alloc_zeroed (16 samples, 1.83%)</title><rect x="51.6571%" y="309" width="1.8286%" height="15" fill="rgb(218,1,36)" fg:x="452" fg:w="16"/><text x="51.9071%" y="319.50">a..</text></g><g><title>__libc_calloc (16 samples, 1.83%)</title><rect x="51.6571%" y="293" width="1.8286%" height="15" fill="rgb(246,84,54)" fg:x="452" fg:w="16"/><text x="51.9071%" y="303.50">_..</text></g><g><title>[libc.so.6] (10 samples, 1.14%)</title><rect x="52.3429%" y="277" width="1.1429%" height="15" fill="rgb(242,110,6)" fg:x="458" fg:w="10"/><text x="52.5929%" y="287.50"></text></g><g><title>[libc.so.6] (6 samples, 0.69%)</title><rect x="52.8000%" y="261" width="0.6857%" height="15" fill="rgb(214,47,5)" fg:x="462" fg:w="6"/><text x="53.0500%" y="271.50"></text></g><g><title>__rust_dealloc (1 samples, 0.11%)</title><rect x="53.4857%" y="325" width="0.1143%" height="15" fill="rgb(218,159,25)" fg:x="468" fg:w="1"/><text x="53.7357%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (5 samples, 0.57%)</title><rect x="53.4857%" y="405" width="0.5714%" height="15" fill="rgb(215,211,28)" fg:x="468" fg:w="5"/><text x="53.7357%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (5 samples, 0.57%)</title><rect x="53.4857%" y="389" width="0.5714%" height="15" fill="rgb(238,59,32)" fg:x="468" fg:w="5"/><text x="53.7357%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.57%)</title><rect x="53.4857%" y="373" width="0.5714%" height="15" fill="rgb(226,82,3)" fg:x="468" fg:w="5"/><text x="53.7357%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.57%)</title><rect x="53.4857%" y="357" width="0.5714%" height="15" fill="rgb(240,164,32)" fg:x="468" fg:w="5"/><text x="53.7357%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.57%)</title><rect x="53.4857%" y="341" width="0.5714%" height="15" fill="rgb(232,46,7)" fg:x="468" fg:w="5"/><text x="53.7357%" y="351.50"></text></g><g><title>cfree (4 samples, 0.46%)</title><rect x="53.6000%" y="325" width="0.4571%" height="15" fill="rgb(229,129,53)" fg:x="469" fg:w="4"/><text x="53.8500%" y="335.50"></text></g><g><title>[libc.so.6] (3 samples, 0.34%)</title><rect x="53.7143%" y="309" width="0.3429%" height="15" fill="rgb(234,188,29)" fg:x="470" fg:w="3"/><text x="53.9643%" y="319.50"></text></g><g><title>recv (98 samples, 11.20%)</title><rect x="54.1714%" y="341" width="11.2000%" height="15" fill="rgb(246,141,4)" fg:x="474" fg:w="98"/><text x="54.4214%" y="351.50">recv</text></g><g><title>tinyhttp_internal::http::read_stream (125 samples, 14.29%)</title><rect x="51.2000%" y="421" width="14.2857%" height="15" fill="rgb(229,23,39)" fg:x="448" fg:w="125"/><text x="51.4500%" y="431.50">tinyhttp_internal::htt..</text></g><g><title>std::net::udp::UdpSocket::recv (100 samples, 11.43%)</title><rect x="54.0571%" y="405" width="11.4286%" height="15" fill="rgb(206,12,3)" fg:x="473" fg:w="100"/><text x="54.3071%" y="415.50">std::net::udp::Ud..</text></g><g><title>std::sys_common::net::UdpSocket::recv (100 samples, 11.43%)</title><rect x="54.0571%" y="389" width="11.4286%" height="15" fill="rgb(252,226,20)" fg:x="473" fg:w="100"/><text x="54.3071%" y="399.50">std::sys_common::..</text></g><g><title>std::sys::unix::net::Socket::read (100 samples, 11.43%)</title><rect x="54.0571%" y="373" width="11.4286%" height="15" fill="rgb(216,123,35)" fg:x="473" fg:w="100"/><text x="54.3071%" y="383.50">std::sys::unix::n..</text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (99 samples, 11.31%)</title><rect x="54.1714%" y="357" width="11.3143%" height="15" fill="rgb(212,68,40)" fg:x="474" fg:w="99"/><text x="54.4214%" y="367.50">std::sys::unix::n..</text></g><g><title>std::sys::unix::cvt (1 samples, 0.11%)</title><rect x="65.3714%" y="341" width="0.1143%" height="15" fill="rgb(254,125,32)" fg:x="572" fg:w="1"/><text x="65.6214%" y="351.50"></text></g><g><title>&lt;isize as std::sys::unix::IsMinusOne&gt;::is_minus_one (1 samples, 0.11%)</title><rect x="65.3714%" y="325" width="0.1143%" height="15" fill="rgb(253,97,22)" fg:x="572" fg:w="1"/><text x="65.6214%" y="335.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.46%)</title><rect x="65.4857%" y="405" width="0.4571%" height="15" fill="rgb(241,101,14)" fg:x="573" fg:w="4"/><text x="65.7357%" y="415.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (4 samples, 0.46%)</title><rect x="65.4857%" y="389" width="0.4571%" height="15" fill="rgb(238,103,29)" fg:x="573" fg:w="4"/><text x="65.7357%" y="399.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (3 samples, 0.34%)</title><rect x="65.6000%" y="373" width="0.3429%" height="15" fill="rgb(233,195,47)" fg:x="574" fg:w="3"/><text x="65.8500%" y="383.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (3 samples, 0.34%)</title><rect x="65.6000%" y="357" width="0.3429%" height="15" fill="rgb(246,218,30)" fg:x="574" fg:w="3"/><text x="65.8500%" y="367.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (1 samples, 0.11%)</title><rect x="65.9429%" y="405" width="0.1143%" height="15" fill="rgb(219,145,47)" fg:x="577" fg:w="1"/><text x="66.1929%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.11%)</title><rect x="65.9429%" y="389" width="0.1143%" height="15" fill="rgb(243,12,26)" fg:x="577" fg:w="1"/><text x="66.1929%" y="399.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.11%)</title><rect x="65.9429%" y="373" width="0.1143%" height="15" fill="rgb(214,87,16)" fg:x="577" fg:w="1"/><text x="66.1929%" y="383.50"></text></g><g><title>alloc::string::String::from_utf8_unchecked (1 samples, 0.11%)</title><rect x="65.9429%" y="357" width="0.1143%" height="15" fill="rgb(208,99,42)" fg:x="577" fg:w="1"/><text x="66.1929%" y="367.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::byteset_create (1 samples, 0.11%)</title><rect x="66.0571%" y="341" width="0.1143%" height="15" fill="rgb(253,99,2)" fg:x="578" fg:w="1"/><text x="66.3071%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.11%)</title><rect x="66.0571%" y="325" width="0.1143%" height="15" fill="rgb(220,168,23)" fg:x="578" fg:w="1"/><text x="66.3071%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::split (2 samples, 0.23%)</title><rect x="66.0571%" y="405" width="0.2286%" height="15" fill="rgb(242,38,24)" fg:x="578" fg:w="2"/><text x="66.3071%" y="415.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::into_searcher (2 samples, 0.23%)</title><rect x="66.0571%" y="389" width="0.2286%" height="15" fill="rgb(225,182,9)" fg:x="578" fg:w="2"/><text x="66.3071%" y="399.50"></text></g><g><title>core::str::pattern::StrSearcher::new (2 samples, 0.23%)</title><rect x="66.0571%" y="373" width="0.2286%" height="15" fill="rgb(243,178,37)" fg:x="578" fg:w="2"/><text x="66.3071%" y="383.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (2 samples, 0.23%)</title><rect x="66.0571%" y="357" width="0.2286%" height="15" fill="rgb(232,139,19)" fg:x="578" fg:w="2"/><text x="66.3071%" y="367.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::maximal_suffix (1 samples, 0.11%)</title><rect x="66.1714%" y="341" width="0.1143%" height="15" fill="rgb(225,201,24)" fg:x="579" fg:w="1"/><text x="66.4214%" y="351.50"></text></g><g><title>tinyhttp_internal::request::Request::get_headers (8 samples, 0.91%)</title><rect x="65.4857%" y="421" width="0.9143%" height="15" fill="rgb(221,47,46)" fg:x="573" fg:w="8"/><text x="65.7357%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.11%)</title><rect x="66.2857%" y="405" width="0.1143%" height="15" fill="rgb(249,23,13)" fg:x="580" fg:w="1"/><text x="66.5357%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.11%)</title><rect x="66.2857%" y="389" width="0.1143%" height="15" fill="rgb(219,9,5)" fg:x="580" fg:w="1"/><text x="66.5357%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.11%)</title><rect x="66.2857%" y="373" width="0.1143%" height="15" fill="rgb(254,171,16)" fg:x="580" fg:w="1"/><text x="66.5357%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.11%)</title><rect x="66.2857%" y="357" width="0.1143%" height="15" fill="rgb(230,171,20)" fg:x="580" fg:w="1"/><text x="66.5357%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.11%)</title><rect x="66.2857%" y="341" width="0.1143%" height="15" fill="rgb(210,71,41)" fg:x="580" fg:w="1"/><text x="66.5357%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.11%)</title><rect x="66.2857%" y="325" width="0.1143%" height="15" fill="rgb(206,173,20)" fg:x="580" fg:w="1"/><text x="66.5357%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.11%)</title><rect x="66.2857%" y="309" width="0.1143%" height="15" fill="rgb(233,88,34)" fg:x="580" fg:w="1"/><text x="66.5357%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (1 samples, 0.11%)</title><rect x="66.4000%" y="405" width="0.1143%" height="15" fill="rgb(223,209,46)" fg:x="581" fg:w="1"/><text x="66.6500%" y="415.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (1 samples, 0.11%)</title><rect x="66.4000%" y="389" width="0.1143%" height="15" fill="rgb(250,43,18)" fg:x="581" fg:w="1"/><text x="66.6500%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.11%)</title><rect x="66.4000%" y="373" width="0.1143%" height="15" fill="rgb(208,13,10)" fg:x="581" fg:w="1"/><text x="66.6500%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.11%)</title><rect x="66.4000%" y="357" width="0.1143%" height="15" fill="rgb(212,200,36)" fg:x="581" fg:w="1"/><text x="66.6500%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.11%)</title><rect x="66.4000%" y="341" width="0.1143%" height="15" fill="rgb(225,90,30)" fg:x="581" fg:w="1"/><text x="66.6500%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.11%)</title><rect x="66.4000%" y="325" width="0.1143%" height="15" fill="rgb(236,182,39)" fg:x="581" fg:w="1"/><text x="66.6500%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.11%)</title><rect x="66.4000%" y="309" width="0.1143%" height="15" fill="rgb(212,144,35)" fg:x="581" fg:w="1"/><text x="66.6500%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.11%)</title><rect x="66.4000%" y="293" width="0.1143%" height="15" fill="rgb(228,63,44)" fg:x="581" fg:w="1"/><text x="66.6500%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.11%)</title><rect x="66.4000%" y="277" width="0.1143%" height="15" fill="rgb(228,109,6)" fg:x="581" fg:w="1"/><text x="66.6500%" y="287.50"></text></g><g><title>malloc (1 samples, 0.11%)</title><rect x="66.4000%" y="261" width="0.1143%" height="15" fill="rgb(238,117,24)" fg:x="581" fg:w="1"/><text x="66.6500%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="66.6286%" y="309" width="0.1143%" height="15" fill="rgb(242,26,26)" fg:x="583" fg:w="1"/><text x="66.8786%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="66.6286%" y="293" width="0.1143%" height="15" fill="rgb(221,92,48)" fg:x="583" fg:w="1"/><text x="66.8786%" y="303.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (1 samples, 0.11%)</title><rect x="66.6286%" y="277" width="0.1143%" height="15" fill="rgb(209,209,32)" fg:x="583" fg:w="1"/><text x="66.8786%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::into_iter::IntoIter&lt;u8&gt;&gt;&gt; (1 samples, 0.11%)</title><rect x="66.6286%" y="261" width="0.1143%" height="15" fill="rgb(221,70,22)" fg:x="583" fg:w="1"/><text x="66.8786%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u8&gt;&gt; (1 samples, 0.11%)</title><rect x="66.6286%" y="245" width="0.1143%" height="15" fill="rgb(248,145,5)" fg:x="583" fg:w="1"/><text x="66.8786%" y="255.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="66.6286%" y="229" width="0.1143%" height="15" fill="rgb(226,116,26)" fg:x="583" fg:w="1"/><text x="66.8786%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u8,alloc::alloc::Global&gt;&gt; (1 samples, 0.11%)</title><rect x="66.6286%" y="213" width="0.1143%" height="15" fill="rgb(244,5,17)" fg:x="583" fg:w="1"/><text x="66.8786%" y="223.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="66.6286%" y="197" width="0.1143%" height="15" fill="rgb(252,159,33)" fg:x="583" fg:w="1"/><text x="66.8786%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.11%)</title><rect x="66.6286%" y="181" width="0.1143%" height="15" fill="rgb(206,71,0)" fg:x="583" fg:w="1"/><text x="66.8786%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="66.6286%" y="165" width="0.1143%" height="15" fill="rgb(233,118,54)" fg:x="583" fg:w="1"/><text x="66.8786%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.11%)</title><rect x="66.6286%" y="149" width="0.1143%" height="15" fill="rgb(234,83,48)" fg:x="583" fg:w="1"/><text x="66.8786%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.11%)</title><rect x="66.6286%" y="133" width="0.1143%" height="15" fill="rgb(228,3,54)" fg:x="583" fg:w="1"/><text x="66.8786%" y="143.50"></text></g><g><title>cfree (1 samples, 0.11%)</title><rect x="66.6286%" y="117" width="0.1143%" height="15" fill="rgb(226,155,13)" fg:x="583" fg:w="1"/><text x="66.8786%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.11%)</title><rect x="66.7429%" y="309" width="0.1143%" height="15" fill="rgb(241,28,37)" fg:x="584" fg:w="1"/><text x="66.9929%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.11%)</title><rect x="66.7429%" y="293" width="0.1143%" height="15" fill="rgb(233,93,10)" fg:x="584" fg:w="1"/><text x="66.9929%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (1 samples, 0.11%)</title><rect x="66.7429%" y="277" width="0.1143%" height="15" fill="rgb(225,113,19)" fg:x="584" fg:w="1"/><text x="66.9929%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (4 samples, 0.46%)</title><rect x="66.5143%" y="405" width="0.4571%" height="15" fill="rgb(241,2,18)" fg:x="582" fg:w="4"/><text x="66.7643%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (4 samples, 0.46%)</title><rect x="66.5143%" y="389" width="0.4571%" height="15" fill="rgb(228,207,21)" fg:x="582" fg:w="4"/><text x="66.7643%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.46%)</title><rect x="66.5143%" y="373" width="0.4571%" height="15" fill="rgb(213,211,35)" fg:x="582" fg:w="4"/><text x="66.7643%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (4 samples, 0.46%)</title><rect x="66.5143%" y="357" width="0.4571%" height="15" fill="rgb(209,83,10)" fg:x="582" fg:w="4"/><text x="66.7643%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4 samples, 0.46%)</title><rect x="66.5143%" y="341" width="0.4571%" height="15" fill="rgb(209,164,1)" fg:x="582" fg:w="4"/><text x="66.7643%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (4 samples, 0.46%)</title><rect x="66.5143%" y="325" width="0.4571%" height="15" fill="rgb(213,184,43)" fg:x="582" fg:w="4"/><text x="66.7643%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.11%)</title><rect x="66.8571%" y="309" width="0.1143%" height="15" fill="rgb(231,61,34)" fg:x="585" fg:w="1"/><text x="67.1071%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.11%)</title><rect x="66.8571%" y="293" width="0.1143%" height="15" fill="rgb(235,75,3)" fg:x="585" fg:w="1"/><text x="67.1071%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="66.8571%" y="277" width="0.1143%" height="15" fill="rgb(220,106,47)" fg:x="585" fg:w="1"/><text x="67.1071%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.11%)</title><rect x="66.8571%" y="261" width="0.1143%" height="15" fill="rgb(210,196,33)" fg:x="585" fg:w="1"/><text x="67.1071%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="66.8571%" y="245" width="0.1143%" height="15" fill="rgb(229,154,42)" fg:x="585" fg:w="1"/><text x="67.1071%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.11%)</title><rect x="66.8571%" y="229" width="0.1143%" height="15" fill="rgb(228,114,26)" fg:x="585" fg:w="1"/><text x="67.1071%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.11%)</title><rect x="66.8571%" y="213" width="0.1143%" height="15" fill="rgb(208,144,1)" fg:x="585" fg:w="1"/><text x="67.1071%" y="223.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.11%)</title><rect x="66.8571%" y="197" width="0.1143%" height="15" fill="rgb(239,112,37)" fg:x="585" fg:w="1"/><text x="67.1071%" y="207.50"></text></g><g><title>realloc (1 samples, 0.11%)</title><rect x="66.8571%" y="181" width="0.1143%" height="15" fill="rgb(210,96,50)" fg:x="585" fg:w="1"/><text x="67.1071%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.11%)</title><rect x="66.8571%" y="165" width="0.1143%" height="15" fill="rgb(222,178,2)" fg:x="585" fg:w="1"/><text x="67.1071%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.11%)</title><rect x="66.9714%" y="405" width="0.1143%" height="15" fill="rgb(226,74,18)" fg:x="586" fg:w="1"/><text x="67.2214%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.11%)</title><rect x="66.9714%" y="389" width="0.1143%" height="15" fill="rgb(225,67,54)" fg:x="586" fg:w="1"/><text x="67.2214%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="66.9714%" y="373" width="0.1143%" height="15" fill="rgb(251,92,32)" fg:x="586" fg:w="1"/><text x="67.2214%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.11%)</title><rect x="66.9714%" y="357" width="0.1143%" height="15" fill="rgb(228,149,22)" fg:x="586" fg:w="1"/><text x="67.2214%" y="367.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (316 samples, 36.11%)</title><rect x="37.4857%" y="485" width="36.1143%" height="15" fill="rgb(243,54,13)" fg:x="328" fg:w="316"/><text x="37.7357%" y="495.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (284 samples, 32.46%)</title><rect x="41.1429%" y="469" width="32.4571%" height="15" fill="rgb(243,180,28)" fg:x="360" fg:w="284"/><text x="41.3929%" y="479.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>tinyhttp_internal::http::start_http::{{closure}} (284 samples, 32.46%)</title><rect x="41.1429%" y="453" width="32.4571%" height="15" fill="rgb(208,167,24)" fg:x="360" fg:w="284"/><text x="41.3929%" y="463.50">tinyhttp_internal::http::start_http::{{closure}}</text></g><g><title>tinyhttp_internal::http::parse_request (284 samples, 32.46%)</title><rect x="41.1429%" y="437" width="32.4571%" height="15" fill="rgb(245,73,45)" fg:x="360" fg:w="284"/><text x="41.3929%" y="447.50">tinyhttp_internal::http::parse_request</text></g><g><title>tinyhttp_internal::response::Response::send (63 samples, 7.20%)</title><rect x="66.4000%" y="421" width="7.2000%" height="15" fill="rgb(237,203,48)" fg:x="581" fg:w="63"/><text x="66.6500%" y="431.50">tinyhttp_i..</text></g><g><title>std::io::Write::write_all (57 samples, 6.51%)</title><rect x="67.0857%" y="405" width="6.5143%" height="15" fill="rgb(211,197,16)" fg:x="587" fg:w="57"/><text x="67.3357%" y="415.50">std::io::..</text></g><g><title>std::net::udp::UdpSocket::send (57 samples, 6.51%)</title><rect x="67.0857%" y="389" width="6.5143%" height="15" fill="rgb(243,99,51)" fg:x="587" fg:w="57"/><text x="67.3357%" y="399.50">std::net:..</text></g><g><title>std::sys_common::net::UdpSocket::send (57 samples, 6.51%)</title><rect x="67.0857%" y="373" width="6.5143%" height="15" fill="rgb(215,123,29)" fg:x="587" fg:w="57"/><text x="67.3357%" y="383.50">std::sys_..</text></g><g><title>__send (57 samples, 6.51%)</title><rect x="67.0857%" y="357" width="6.5143%" height="15" fill="rgb(239,186,37)" fg:x="587" fg:w="57"/><text x="67.3357%" y="367.50">__send</text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.23%)</title><rect x="73.6000%" y="469" width="0.2286%" height="15" fill="rgb(252,136,39)" fg:x="644" fg:w="2"/><text x="73.8500%" y="479.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (2 samples, 0.23%)</title><rect x="73.6000%" y="453" width="0.2286%" height="15" fill="rgb(223,213,32)" fg:x="644" fg:w="2"/><text x="73.8500%" y="463.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.23%)</title><rect x="73.6000%" y="437" width="0.2286%" height="15" fill="rgb(233,115,5)" fg:x="644" fg:w="2"/><text x="73.8500%" y="447.50"></text></g><g><title>[libc.so.6] (535 samples, 61.14%)</title><rect x="12.9143%" y="725" width="61.1429%" height="15" fill="rgb(207,226,44)" fg:x="113" fg:w="535"/><text x="13.1643%" y="735.50">[libc.so.6]</text></g><g><title>[libc.so.6] (534 samples, 61.03%)</title><rect x="13.0286%" y="709" width="61.0286%" height="15" fill="rgb(208,126,0)" fg:x="114" fg:w="534"/><text x="13.2786%" y="719.50">[libc.so.6]</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (534 samples, 61.03%)</title><rect x="13.0286%" y="693" width="61.0286%" height="15" fill="rgb(244,66,21)" fg:x="114" fg:w="534"/><text x="13.2786%" y="703.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (534 samples, 61.03%)</title><rect x="13.0286%" y="677" width="61.0286%" height="15" fill="rgb(222,97,12)" fg:x="114" fg:w="534"/><text x="13.2786%" y="687.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (534 samples, 61.03%)</title><rect x="13.0286%" y="661" width="61.0286%" height="15" fill="rgb(219,213,19)" fg:x="114" fg:w="534"/><text x="13.2786%" y="671.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (534 samples, 61.03%)</title><rect x="13.0286%" y="645" width="61.0286%" height="15" fill="rgb(252,169,30)" fg:x="114" fg:w="534"/><text x="13.2786%" y="655.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (534 samples, 61.03%)</title><rect x="13.0286%" y="629" width="61.0286%" height="15" fill="rgb(206,32,51)" fg:x="114" fg:w="534"/><text x="13.2786%" y="639.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::panic::catch_unwind (534 samples, 61.03%)</title><rect x="13.0286%" y="613" width="61.0286%" height="15" fill="rgb(250,172,42)" fg:x="114" fg:w="534"/><text x="13.2786%" y="623.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (534 samples, 61.03%)</title><rect x="13.0286%" y="597" width="61.0286%" height="15" fill="rgb(209,34,43)" fg:x="114" fg:w="534"/><text x="13.2786%" y="607.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (534 samples, 61.03%)</title><rect x="13.0286%" y="581" width="61.0286%" height="15" fill="rgb(223,11,35)" fg:x="114" fg:w="534"/><text x="13.2786%" y="591.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (534 samples, 61.03%)</title><rect x="13.0286%" y="565" width="61.0286%" height="15" fill="rgb(251,219,26)" fg:x="114" fg:w="534"/><text x="13.2786%" y="575.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (534 samples, 61.03%)</title><rect x="13.0286%" y="549" width="61.0286%" height="15" fill="rgb(231,119,3)" fg:x="114" fg:w="534"/><text x="13.2786%" y="559.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (534 samples, 61.03%)</title><rect x="13.0286%" y="533" width="61.0286%" height="15" fill="rgb(216,97,11)" fg:x="114" fg:w="534"/><text x="13.2786%" y="543.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rusty_pool::Worker::start::{{closure}} (534 samples, 61.03%)</title><rect x="13.0286%" y="517" width="61.0286%" height="15" fill="rgb(223,59,9)" fg:x="114" fg:w="534"/><text x="13.2786%" y="527.50">rusty_pool::Worker::start::{{closure}}</text></g><g><title>rusty_pool::Worker::exec_task_and_notify (320 samples, 36.57%)</title><rect x="37.4857%" y="501" width="36.5714%" height="15" fill="rgb(233,93,31)" fg:x="328" fg:w="320"/><text x="37.7357%" y="511.50">rusty_pool::Worker::exec_task_and_notify</text></g><g><title>rusty_pool::Worker::mark_idle_and_notify_joiners_if_no_work (4 samples, 0.46%)</title><rect x="73.6000%" y="485" width="0.4571%" height="15" fill="rgb(239,81,33)" fg:x="644" fg:w="4"/><text x="73.8500%" y="495.50"></text></g><g><title>syscall (2 samples, 0.23%)</title><rect x="73.8286%" y="469" width="0.2286%" height="15" fill="rgb(213,120,34)" fg:x="646" fg:w="2"/><text x="74.0786%" y="479.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::default::Default&gt;::default (2 samples, 0.23%)</title><rect x="74.1714%" y="661" width="0.2286%" height="15" fill="rgb(243,49,53)" fg:x="649" fg:w="2"/><text x="74.4214%" y="671.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.23%)</title><rect x="74.1714%" y="645" width="0.2286%" height="15" fill="rgb(247,216,33)" fg:x="649" fg:w="2"/><text x="74.4214%" y="655.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.23%)</title><rect x="74.1714%" y="629" width="0.2286%" height="15" fill="rgb(226,26,14)" fg:x="649" fg:w="2"/><text x="74.4214%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.23%)</title><rect x="74.1714%" y="613" width="0.2286%" height="15" fill="rgb(215,49,53)" fg:x="649" fg:w="2"/><text x="74.4214%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.23%)</title><rect x="74.1714%" y="597" width="0.2286%" height="15" fill="rgb(245,162,40)" fg:x="649" fg:w="2"/><text x="74.4214%" y="607.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.23%)</title><rect x="74.1714%" y="581" width="0.2286%" height="15" fill="rgb(229,68,17)" fg:x="649" fg:w="2"/><text x="74.4214%" y="591.50"></text></g><g><title>malloc (2 samples, 0.23%)</title><rect x="74.1714%" y="565" width="0.2286%" height="15" fill="rgb(213,182,10)" fg:x="649" fg:w="2"/><text x="74.4214%" y="575.50"></text></g><g><title>[libc.so.6] (2 samples, 0.23%)</title><rect x="74.1714%" y="549" width="0.2286%" height="15" fill="rgb(245,125,30)" fg:x="649" fg:w="2"/><text x="74.4214%" y="559.50"></text></g><g><title>[libc.so.6] (1 samples, 0.11%)</title><rect x="74.2857%" y="533" width="0.1143%" height="15" fill="rgb(232,202,2)" fg:x="650" fg:w="1"/><text x="74.5357%" y="543.50"></text></g><g><title>[libc.so.6] (18 samples, 2.06%)</title><rect x="74.4000%" y="661" width="2.0571%" height="15" fill="rgb(237,140,51)" fg:x="651" fg:w="18"/><text x="74.6500%" y="671.50">[..</text></g><g><title>[libc.so.6] (77 samples, 8.80%)</title><rect x="76.4571%" y="613" width="8.8000%" height="15" fill="rgb(236,157,25)" fg:x="669" fg:w="77"/><text x="76.7071%" y="623.50">[libc.so.6]</text></g><g><title>miniz_oxide::deflate::core::DictOxide::new (83 samples, 9.49%)</title><rect x="76.4571%" y="661" width="9.4857%" height="15" fill="rgb(219,209,0)" fg:x="669" fg:w="83"/><text x="76.7071%" y="671.50">miniz_oxide::d..</text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::default::Default&gt;::default (83 samples, 9.49%)</title><rect x="76.4571%" y="645" width="9.4857%" height="15" fill="rgb(240,116,54)" fg:x="669" fg:w="83"/><text x="76.7071%" y="655.50">&lt;alloc::boxed:..</text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (83 samples, 9.49%)</title><rect x="76.4571%" y="629" width="9.4857%" height="15" fill="rgb(216,10,36)" fg:x="669" fg:w="83"/><text x="76.7071%" y="639.50">alloc::boxed::..</text></g><g><title>alloc::alloc::exchange_malloc (6 samples, 0.69%)</title><rect x="85.2571%" y="613" width="0.6857%" height="15" fill="rgb(222,72,44)" fg:x="746" fg:w="6"/><text x="85.5071%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.69%)</title><rect x="85.2571%" y="597" width="0.6857%" height="15" fill="rgb(232,159,9)" fg:x="746" fg:w="6"/><text x="85.5071%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.69%)</title><rect x="85.2571%" y="581" width="0.6857%" height="15" fill="rgb(210,39,32)" fg:x="746" fg:w="6"/><text x="85.5071%" y="591.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.69%)</title><rect x="85.2571%" y="565" width="0.6857%" height="15" fill="rgb(216,194,45)" fg:x="746" fg:w="6"/><text x="85.5071%" y="575.50"></text></g><g><title>malloc (6 samples, 0.69%)</title><rect x="85.2571%" y="549" width="0.6857%" height="15" fill="rgb(218,18,35)" fg:x="746" fg:w="6"/><text x="85.5071%" y="559.50"></text></g><g><title>[libc.so.6] (6 samples, 0.69%)</title><rect x="85.2571%" y="533" width="0.6857%" height="15" fill="rgb(207,83,51)" fg:x="746" fg:w="6"/><text x="85.5071%" y="543.50"></text></g><g><title>[libc.so.6] (5 samples, 0.57%)</title><rect x="85.3714%" y="517" width="0.5714%" height="15" fill="rgb(225,63,43)" fg:x="747" fg:w="5"/><text x="85.6214%" y="527.50"></text></g><g><title>[libc.so.6] (69 samples, 7.89%)</title><rect x="85.9429%" y="613" width="7.8857%" height="15" fill="rgb(207,57,36)" fg:x="752" fg:w="69"/><text x="86.1929%" y="623.50">[libc.so.6]</text></g><g><title>&lt;miniz_oxide::deflate::core::CompressorOxide as core::default::Default&gt;::default (179 samples, 20.46%)</title><rect x="74.1714%" y="677" width="20.4571%" height="15" fill="rgb(216,99,33)" fg:x="649" fg:w="179"/><text x="74.4214%" y="687.50">&lt;miniz_oxide::deflate::core::Com..</text></g><g><title>miniz_oxide::deflate::core::ParamsOxide::new (76 samples, 8.69%)</title><rect x="85.9429%" y="661" width="8.6857%" height="15" fill="rgb(225,42,16)" fg:x="752" fg:w="76"/><text x="86.1929%" y="671.50">miniz_oxide:..</text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::default::Default&gt;::default (76 samples, 8.69%)</title><rect x="85.9429%" y="645" width="8.6857%" height="15" fill="rgb(220,201,45)" fg:x="752" fg:w="76"/><text x="86.1929%" y="655.50">&lt;alloc::boxe..</text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (76 samples, 8.69%)</title><rect x="85.9429%" y="629" width="8.6857%" height="15" fill="rgb(225,33,4)" fg:x="752" fg:w="76"/><text x="86.1929%" y="639.50">alloc::boxed..</text></g><g><title>alloc::alloc::exchange_malloc (7 samples, 0.80%)</title><rect x="93.8286%" y="613" width="0.8000%" height="15" fill="rgb(224,33,50)" fg:x="821" fg:w="7"/><text x="94.0786%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.80%)</title><rect x="93.8286%" y="597" width="0.8000%" height="15" fill="rgb(246,198,51)" fg:x="821" fg:w="7"/><text x="94.0786%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.80%)</title><rect x="93.8286%" y="581" width="0.8000%" height="15" fill="rgb(205,22,4)" fg:x="821" fg:w="7"/><text x="94.0786%" y="591.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.80%)</title><rect x="93.8286%" y="565" width="0.8000%" height="15" fill="rgb(206,3,8)" fg:x="821" fg:w="7"/><text x="94.0786%" y="575.50"></text></g><g><title>malloc (7 samples, 0.80%)</title><rect x="93.8286%" y="549" width="0.8000%" height="15" fill="rgb(251,23,15)" fg:x="821" fg:w="7"/><text x="94.0786%" y="559.50"></text></g><g><title>[libc.so.6] (5 samples, 0.57%)</title><rect x="94.0571%" y="533" width="0.5714%" height="15" fill="rgb(252,88,28)" fg:x="823" fg:w="5"/><text x="94.3071%" y="543.50"></text></g><g><title>[libc.so.6] (5 samples, 0.57%)</title><rect x="94.0571%" y="517" width="0.5714%" height="15" fill="rgb(212,127,14)" fg:x="823" fg:w="5"/><text x="94.3071%" y="527.50"></text></g><g><title>[libc.so.6] (28 samples, 3.20%)</title><rect x="94.6286%" y="661" width="3.2000%" height="15" fill="rgb(247,145,37)" fg:x="828" fg:w="28"/><text x="94.8786%" y="671.50">[li..</text></g><g><title>&lt;flate2::ffi::rust::Deflate as flate2::ffi::DeflateBackend&gt;::make (216 samples, 24.69%)</title><rect x="74.0571%" y="709" width="24.6857%" height="15" fill="rgb(209,117,53)" fg:x="648" fg:w="216"/><text x="74.3071%" y="719.50">&lt;flate2::ffi::rust::Deflate as flate2::..</text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::default::Default&gt;::default (215 samples, 24.57%)</title><rect x="74.1714%" y="693" width="24.5714%" height="15" fill="rgb(212,90,42)" fg:x="649" fg:w="215"/><text x="74.4214%" y="703.50">&lt;alloc::boxed::Box&lt;T&gt; as core::default:..</text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (36 samples, 4.11%)</title><rect x="94.6286%" y="677" width="4.1143%" height="15" fill="rgb(218,164,37)" fg:x="828" fg:w="36"/><text x="94.8786%" y="687.50">allo..</text></g><g><title>alloc::alloc::exchange_malloc (8 samples, 0.91%)</title><rect x="97.8286%" y="661" width="0.9143%" height="15" fill="rgb(246,65,34)" fg:x="856" fg:w="8"/><text x="98.0786%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.91%)</title><rect x="97.8286%" y="645" width="0.9143%" height="15" fill="rgb(231,100,33)" fg:x="856" fg:w="8"/><text x="98.0786%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.91%)</title><rect x="97.8286%" y="629" width="0.9143%" height="15" fill="rgb(228,126,14)" fg:x="856" fg:w="8"/><text x="98.0786%" y="639.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.91%)</title><rect x="97.8286%" y="613" width="0.9143%" height="15" fill="rgb(215,173,21)" fg:x="856" fg:w="8"/><text x="98.0786%" y="623.50"></text></g><g><title>malloc (8 samples, 0.91%)</title><rect x="97.8286%" y="597" width="0.9143%" height="15" fill="rgb(210,6,40)" fg:x="856" fg:w="8"/><text x="98.0786%" y="607.50"></text></g><g><title>[libc.so.6] (7 samples, 0.80%)</title><rect x="97.9429%" y="581" width="0.8000%" height="15" fill="rgb(212,48,18)" fg:x="857" fg:w="7"/><text x="98.1929%" y="591.50"></text></g><g><title>[libc.so.6] (6 samples, 0.69%)</title><rect x="98.0571%" y="565" width="0.6857%" height="15" fill="rgb(230,214,11)" fg:x="858" fg:w="6"/><text x="98.3071%" y="575.50"></text></g><g><title>__mprotect (6 samples, 0.69%)</title><rect x="98.0571%" y="549" width="0.6857%" height="15" fill="rgb(254,105,39)" fg:x="858" fg:w="6"/><text x="98.3071%" y="559.50"></text></g><g><title>[libc.so.6] (1 samples, 0.11%)</title><rect x="98.7429%" y="709" width="0.1143%" height="15" fill="rgb(245,158,5)" fg:x="864" fg:w="1"/><text x="98.9929%" y="719.50"></text></g><g><title>__libc_calloc (1 samples, 0.11%)</title><rect x="98.8571%" y="709" width="0.1143%" height="15" fill="rgb(249,208,11)" fg:x="865" fg:w="1"/><text x="99.1071%" y="719.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.23%)</title><rect x="98.9714%" y="709" width="0.2286%" height="15" fill="rgb(210,39,28)" fg:x="866" fg:w="2"/><text x="99.2214%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.11%)</title><rect x="99.0857%" y="693" width="0.1143%" height="15" fill="rgb(211,56,53)" fg:x="867" fg:w="1"/><text x="99.3357%" y="703.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.11%)</title><rect x="99.0857%" y="677" width="0.1143%" height="15" fill="rgb(226,201,30)" fg:x="867" fg:w="1"/><text x="99.3357%" y="687.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.11%)</title><rect x="99.0857%" y="661" width="0.1143%" height="15" fill="rgb(239,101,34)" fg:x="867" fg:w="1"/><text x="99.3357%" y="671.50"></text></g><g><title>crossbeam_channel::context::Context::with::{{closure}} (1 samples, 0.11%)</title><rect x="99.2000%" y="709" width="0.1143%" height="15" fill="rgb(226,209,5)" fg:x="868" fg:w="1"/><text x="99.4500%" y="719.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv::{{closure}} (1 samples, 0.11%)</title><rect x="99.2000%" y="693" width="0.1143%" height="15" fill="rgb(250,105,47)" fg:x="868" fg:w="1"/><text x="99.4500%" y="703.50"></text></g><g><title>crossbeam_channel::context::Context::wait_until (1 samples, 0.11%)</title><rect x="99.2000%" y="677" width="0.1143%" height="15" fill="rgb(230,72,3)" fg:x="868" fg:w="1"/><text x="99.4500%" y="687.50"></text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (1 samples, 0.11%)</title><rect x="99.2000%" y="661" width="0.1143%" height="15" fill="rgb(232,218,39)" fg:x="868" fg:w="1"/><text x="99.4500%" y="671.50"></text></g><g><title>infer::get (3 samples, 0.34%)</title><rect x="99.3143%" y="709" width="0.3429%" height="15" fill="rgb(248,166,6)" fg:x="869" fg:w="3"/><text x="99.5643%" y="719.50"></text></g><g><title>infer::Infer::get (2 samples, 0.23%)</title><rect x="99.4286%" y="693" width="0.2286%" height="15" fill="rgb(247,89,20)" fg:x="870" fg:w="2"/><text x="99.6786%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::find (2 samples, 0.23%)</title><rect x="99.4286%" y="677" width="0.2286%" height="15" fill="rgb(248,130,54)" fg:x="870" fg:w="2"/><text x="99.6786%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (2 samples, 0.23%)</title><rect x="99.4286%" y="661" width="0.2286%" height="15" fill="rgb(234,196,4)" fg:x="870" fg:w="2"/><text x="99.6786%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::find::{{closure}} (2 samples, 0.23%)</title><rect x="99.4286%" y="645" width="0.2286%" height="15" fill="rgb(250,143,31)" fg:x="870" fg:w="2"/><text x="99.6786%" y="655.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (2 samples, 0.23%)</title><rect x="99.4286%" y="629" width="0.2286%" height="15" fill="rgb(211,110,34)" fg:x="870" fg:w="2"/><text x="99.6786%" y="639.50"></text></g><g><title>infer::Infer::get::{{closure}} (2 samples, 0.23%)</title><rect x="99.4286%" y="613" width="0.2286%" height="15" fill="rgb(215,124,48)" fg:x="870" fg:w="2"/><text x="99.6786%" y="623.50"></text></g><g><title>infer::Type::matches (2 samples, 0.23%)</title><rect x="99.4286%" y="597" width="0.2286%" height="15" fill="rgb(216,46,13)" fg:x="870" fg:w="2"/><text x="99.6786%" y="607.50"></text></g><g><title>syscall (1 samples, 0.11%)</title><rect x="99.6571%" y="709" width="0.1143%" height="15" fill="rgb(205,184,25)" fg:x="872" fg:w="1"/><text x="99.9071%" y="719.50"></text></g><g><title>[unknown] (226 samples, 25.83%)</title><rect x="74.0571%" y="725" width="25.8286%" height="15" fill="rgb(228,1,10)" fg:x="648" fg:w="226"/><text x="74.3071%" y="735.50">[unknown]</text></g><g><title>tinyhttp_internal::config::Config::get_routes (1 samples, 0.11%)</title><rect x="99.7714%" y="709" width="0.1143%" height="15" fill="rgb(213,116,27)" fg:x="873" fg:w="1"/><text x="100.0214%" y="719.50"></text></g><g><title>all (875 samples, 100%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(241,95,50)" fg:x="0" fg:w="875"/><text x="0.2500%" y="767.50"></text></g><g><title>rusty_pool_1_th (770 samples, 88.00%)</title><rect x="12.0000%" y="741" width="88.0000%" height="15" fill="rgb(238,48,32)" fg:x="105" fg:w="770"/><text x="12.2500%" y="751.50">rusty_pool_1_th</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.11%)</title><rect x="99.8857%" y="725" width="0.1143%" height="15" fill="rgb(235,113,49)" fg:x="874" fg:w="1"/><text x="100.1357%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (1 samples, 0.11%)</title><rect x="99.8857%" y="709" width="0.1143%" height="15" fill="rgb(205,127,43)" fg:x="874" fg:w="1"/><text x="100.1357%" y="719.50"></text></g></svg></svg>